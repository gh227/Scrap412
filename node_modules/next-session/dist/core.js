"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applySession = exports.stringify = void 0;
const cookie_1 = require("cookie");
const nanoid_1 = require("nanoid");
const memory_1 = __importDefault(require("./store/memory"));
const session_1 = __importDefault(require("./session"));
function stringify(sess) {
    return JSON.stringify(sess, (key, val) => key === 'cookie' ? undefined : val);
}
exports.stringify = stringify;
function getOptions(opts = {}) {
    return {
        name: opts.name || 'sid',
        store: opts.store || new memory_1.default(),
        genid: opts.genid || nanoid_1.nanoid,
        encode: opts.encode,
        decode: opts.decode,
        rolling: opts.rolling || false,
        touchAfter: opts.touchAfter ? opts.touchAfter : 0,
        cookie: opts.cookie || {},
        autoCommit: typeof opts.autoCommit !== 'undefined' ? opts.autoCommit : true,
    };
}
async function applySession(req, res, opts) {
    const options = getOptions(opts);
    if (req.session)
        return;
    const rawSessionId = req.headers && req.headers.cookie
        ? cookie_1.parse(req.headers.cookie)[options.name]
        : null;
    req._sessId = req.sessionId =
        rawSessionId && typeof options.decode === 'function'
            ? await options.decode(rawSessionId)
            : rawSessionId;
    req._sessOpts = options;
    req.sessionStore = options.store;
    if (req.sessionId) {
        const sess = await req.sessionStore.get(req.sessionId);
        if (sess)
            req.session = new session_1.default(req, res, sess);
    }
    if (!req.session) {
        req.sessionId = options.genid();
        req.session = new session_1.default(req, res);
    }
    req._sessStr = stringify(req.session);
    // autocommit
    if (options.autoCommit) {
        const oldEnd = res.end;
        res.end = async function resEndProxy(...args) {
            if (res.finished || res.writableEnded)
                return;
            if (req.session)
                await req.session.commit();
            oldEnd.apply(this, args);
        };
    }
}
exports.applySession = applySession;
