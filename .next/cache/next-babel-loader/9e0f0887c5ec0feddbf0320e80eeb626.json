{"ast":null,"code":"var express = require('express');\n\nvar cors = require('cors');\n\nvar app = express();\nvar whitelist = ['http://example1.com', 'http://example2.com'];\n\nvar corsOptionsDelegate = function (req, callback) {\n  var corsOptions;\n  console.log('the origin', req.header('Origin'));\n\n  if (whitelist.indexOf(req.header('Origin')) !== -1) {\n    corsOptions = {\n      origin: true\n    }; // reflect (enable) the requested origin in the CORS response\n  } else {\n    corsOptions = {\n      origin: false\n    }; // disable CORS for this request\n  }\n\n  callback(null, corsOptions); // callback expects two parameters: error and options\n};\n\napp.get('/api/users', cors(corsOptionsDelegate), function (req, res, next) {\n  res.json({\n    msg: 'This is CORS-enabled for a whitelisted domain.'\n  });\n});\nexport default app;\n/*import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nimport Cors from 'cors'\nimport next, { NextApiRequest, NextApiResponse } from 'next';\n\nconst handler = nextConnect();\nconst cors = Cors({\n    methods: ['GET', 'HEAD'],\n  })\n\nvar whitelist = ['http://example1.com', 'http://example2.com']\nvar corsOptionsDelegate = function(req, callback) {\n  var corsOptions;\n  if (whitelist.indexOf(req) !== -1) {\n    corsOptions = { origin: true } // reflect (enable) the requested origin in the CORS response\n  } else {\n    corsOptions = { origin: false } // disable CORS for this request\n  }\n  callback(null, corsOptions) // callback expects two parameters: error and options\n}\n\n\nhandler.use(middleware);\n\nfunction runMiddleware(req, res, fn) {\n    return new Promise((resolve, reject) => {\n      fn(req, res, (result) => {\n          console.log('from run m : ', result)\n        if (result instanceof Error) {\n          return reject(result)\n        }\n  \n        return resolve(result)\n      })\n    })\n  }\n\nhandler.get('/api/users', async(req, res, next)=>{\n   const result = await runMiddleware(req, res, cors)\n   console.log(result)\n}, async(req, res)=>res.send(\"not working\"));\n\nhandler.post(async (req, res)=>{\n    \n    const email = normalizeEmail(req.body.email)\n    console.log(req.body.email)\n    const {name, password} = req.body;\n    \n    if(!name){\n        res.status(400).send(\"Name is  required\")\n        return;\n    }\n    if(!isEmail(email)){\n        res.status(400).send(\"invalid email\")\n        return;\n    }\n    if(!password){\n        res.status(400).send(\"Password is required\")\n        return;\n    }\n\n    if((await req.db.collection('users').countDocuments({email})>0)){\n        res.status(400).send(\"Email already exist\")\n    }\n    const hashedPassword = await bcrypt.hash(password,10);\n    const user = await req.db.collection('users').insertOne(\n        {\n            _id:nanoid(12),\n            name,\n            email,\n            password:hashedPassword,\n            isVerified:false,\n        }\n    ).then(({ops})=>ops[0]);\n    req.logIn(user, (err)=>{\n        if(err) throw err;\n        res.status(201).json({\n            user:extractUser(req)\n        })\n    })\n})\n\nexport default handler;*/","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/users.js"],"names":["express","require","cors","app","whitelist","corsOptionsDelegate","req","callback","corsOptions","console","log","header","indexOf","origin","get","res","next","json","msg"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,GAAG,GAAGH,OAAO,EAAjB;AAEA,IAAII,SAAS,GAAG,CAAC,qBAAD,EAAwB,qBAAxB,CAAhB;;AACA,IAAIC,mBAAmB,GAAG,UAAUC,GAAV,EAAeC,QAAf,EAAyB;AACjD,MAAIC,WAAJ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,GAAG,CAACK,MAAJ,CAAW,QAAX,CAA1B;;AACA,MAAIP,SAAS,CAACQ,OAAV,CAAkBN,GAAG,CAACK,MAAJ,CAAW,QAAX,CAAlB,MAA4C,CAAC,CAAjD,EAAoD;AAClDH,IAAAA,WAAW,GAAG;AAAEK,MAAAA,MAAM,EAAE;AAAV,KAAd,CADkD,CACnB;AAChC,GAFD,MAEO;AACLL,IAAAA,WAAW,GAAG;AAAEK,MAAAA,MAAM,EAAE;AAAV,KAAd,CADK,CAC2B;AACjC;;AACDN,EAAAA,QAAQ,CAAC,IAAD,EAAOC,WAAP,CAAR,CARiD,CAQrB;AAC7B,CATD;;AAWAL,GAAG,CAACW,GAAJ,CAAQ,YAAR,EAAsBZ,IAAI,CAACG,mBAAD,CAA1B,EAAiD,UAAUC,GAAV,EAAeS,GAAf,EAAoBC,IAApB,EAA0B;AACzED,EAAAA,GAAG,CAACE,IAAJ,CAAS;AAACC,IAAAA,GAAG,EAAE;AAAN,GAAT;AACD,CAFD;AAIA,eAAef,GAAf;AAgBA","sourcesContent":["var express = require('express')\nvar cors = require('cors')\nvar app = express()\n \nvar whitelist = ['http://example1.com', 'http://example2.com']\nvar corsOptionsDelegate = function (req, callback) {\n  var corsOptions;\n  console.log('the origin', req.header('Origin'))\n  if (whitelist.indexOf(req.header('Origin')) !== -1) {\n    corsOptions = { origin: true } // reflect (enable) the requested origin in the CORS response\n  } else {\n    corsOptions = { origin: false } // disable CORS for this request\n  }\n  callback(null, corsOptions) // callback expects two parameters: error and options\n}\n \napp.get('/api/users', cors(corsOptionsDelegate), function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for a whitelisted domain.'})\n})\n \nexport default app;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nimport Cors from 'cors'\nimport next, { NextApiRequest, NextApiResponse } from 'next';\n\nconst handler = nextConnect();\nconst cors = Cors({\n    methods: ['GET', 'HEAD'],\n  })\n\nvar whitelist = ['http://example1.com', 'http://example2.com']\nvar corsOptionsDelegate = function(req, callback) {\n  var corsOptions;\n  if (whitelist.indexOf(req) !== -1) {\n    corsOptions = { origin: true } // reflect (enable) the requested origin in the CORS response\n  } else {\n    corsOptions = { origin: false } // disable CORS for this request\n  }\n  callback(null, corsOptions) // callback expects two parameters: error and options\n}\n\n\nhandler.use(middleware);\n\nfunction runMiddleware(req, res, fn) {\n    return new Promise((resolve, reject) => {\n      fn(req, res, (result) => {\n          console.log('from run m : ', result)\n        if (result instanceof Error) {\n          return reject(result)\n        }\n  \n        return resolve(result)\n      })\n    })\n  }\n\nhandler.get('/api/users', async(req, res, next)=>{\n   const result = await runMiddleware(req, res, cors)\n   console.log(result)\n}, async(req, res)=>res.send(\"not working\"));\n\nhandler.post(async (req, res)=>{\n    \n    const email = normalizeEmail(req.body.email)\n    console.log(req.body.email)\n    const {name, password} = req.body;\n    \n    if(!name){\n        res.status(400).send(\"Name is  required\")\n        return;\n    }\n    if(!isEmail(email)){\n        res.status(400).send(\"invalid email\")\n        return;\n    }\n    if(!password){\n        res.status(400).send(\"Password is required\")\n        return;\n    }\n\n    if((await req.db.collection('users').countDocuments({email})>0)){\n        res.status(400).send(\"Email already exist\")\n    }\n    const hashedPassword = await bcrypt.hash(password,10);\n    const user = await req.db.collection('users').insertOne(\n        {\n            _id:nanoid(12),\n            name,\n            email,\n            password:hashedPassword,\n            isVerified:false,\n        }\n    ).then(({ops})=>ops[0]);\n    req.logIn(user, (err)=>{\n        if(err) throw err;\n        res.status(201).json({\n            user:extractUser(req)\n        })\n    })\n})\n\nexport default handler;*/\n"]},"metadata":{},"sourceType":"module"}