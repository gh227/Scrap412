{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nextConnect from 'next-connect';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../../middlewares/middleware';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.get(async (req, res) => {\n  // Pagination: Fetch posts from before the input date or fetch from newest\n  const from = req.query.from ? new Date(req.query.from) : new Date();\n  console.log(new Date());\n  const creatorId = req.query.by;\n  const posts = await req.db.collection('posts').find(_objectSpread({\n    createdAt: {\n      $lte: from\n    }\n  }, creatorId && {\n    creatorId\n  })).sort({\n    createdAt: -1\n  }).limit(parseInt(req.query.limit, 10) || 10).toArray();\n  res.send({\n    posts\n  });\n});\nhandler.post(async (req, res) => {\n  if (!req.user) {\n    return res.status(401).send('unauthenticated');\n  }\n\n  const {\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content\n  } = req.body;\n  if (!content) return res.status(400).send('You must write something');\n  const post = {\n    _id: nanoid(),\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content,\n    createdAt: new Date().toString().slice(0, 16),\n    creatorId: req.user._id\n  };\n  await req.db.collection('posts').insertOne(post);\n  return res.send(post);\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/posts/index.js"],"names":["nextConnect","nanoid","middleware","handler","use","get","req","res","from","query","Date","console","log","creatorId","by","posts","db","collection","find","createdAt","$lte","sort","limit","parseInt","toArray","send","post","user","status","image_link","caption","author","source","source_link","category","headings","abstract_cat","content","body","_id","toString","slice","insertOne"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AAEA,MAAMC,OAAO,GAAGH,WAAW,EAA3B;AAEAG,OAAO,CAACC,GAAR,CAAYF,UAAZ;AAEAC,OAAO,CAACE,GAAR,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC9B;AACA,QAAMC,IAAI,GAAGF,GAAG,CAACG,KAAJ,CAAUD,IAAV,GAAiB,IAAIE,IAAJ,CAASJ,GAAG,CAACG,KAAJ,CAAUD,IAAnB,CAAjB,GAA4C,IAAIE,IAAJ,EAAzD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAIF,IAAJ,EAAZ;AACA,QAAMG,SAAS,GAAGP,GAAG,CAACG,KAAJ,CAAUK,EAA5B;AACA,QAAMC,KAAK,GAAG,MAAMT,GAAG,CAACU,EAAJ,CACjBC,UADiB,CACN,OADM,EAEjBC,IAFiB;AAGhBC,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAEZ;AADG;AAHK,KAMZK,SAAS,IAAI;AAAEA,IAAAA;AAAF,GAND,GAQjBQ,IARiB,CAQZ;AAAEF,IAAAA,SAAS,EAAE,CAAC;AAAd,GARY,EASjBG,KATiB,CASXC,QAAQ,CAACjB,GAAG,CAACG,KAAJ,CAAUa,KAAX,EAAkB,EAAlB,CAAR,IAAiC,EATtB,EAUjBE,OAViB,EAApB;AAWAjB,EAAAA,GAAG,CAACkB,IAAJ,CAAS;AAAEV,IAAAA;AAAF,GAAT;AACD,CAjBD;AAmBAZ,OAAO,CAACuB,IAAR,CAAa,OAAOpB,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,MAAI,CAACD,GAAG,CAACqB,IAAT,EAAe;AACb,WAAOpB,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,iBAArB,CAAP;AACD;;AAED,QAAM;AAAEI,IAAAA,UAAF;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA,MAAvB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA,WAAvC;AACJC,IAAAA,QADI;AACMC,IAAAA,QADN;AACgBC,IAAAA,YADhB;AAC8BC,IAAAA;AAD9B,MACyC/B,GAAG,CAACgC,IADnD;AAGA,MAAI,CAACD,OAAL,EAAc,OAAO9B,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,0BAArB,CAAP;AAEd,QAAMC,IAAI,GAAG;AACXa,IAAAA,GAAG,EAAEtC,MAAM,EADA;AAEX4B,IAAAA,UAFW;AAGXC,IAAAA,OAHW;AAIXC,IAAAA,MAJW;AAKXC,IAAAA,MALW;AAMXC,IAAAA,WANW;AAOXC,IAAAA,QAPW;AAQXC,IAAAA,QARW;AASXC,IAAAA,YATW;AAUXC,IAAAA,OAVW;AAWXlB,IAAAA,SAAS,EAAE,IAAIT,IAAJ,GAAW8B,QAAX,GAAsBC,KAAtB,CAA4B,CAA5B,EAA8B,EAA9B,CAXA;AAYX5B,IAAAA,SAAS,EAAEP,GAAG,CAACqB,IAAJ,CAASY;AAZT,GAAb;AAeA,QAAMjC,GAAG,CAACU,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2ByB,SAA3B,CAAqChB,IAArC,CAAN;AACA,SAAOnB,GAAG,CAACkB,IAAJ,CAASC,IAAT,CAAP;AACD,CA3BD;AA6BA,eAAevB,OAAf","sourcesContent":["import nextConnect from 'next-connect';\r\nimport { nanoid } from 'nanoid';\r\nimport middleware from '../../../middlewares/middleware';\r\n\r\nconst handler = nextConnect();\r\n\r\nhandler.use(middleware);\r\n\r\nhandler.get(async (req, res) => {\r\n  // Pagination: Fetch posts from before the input date or fetch from newest\r\n  const from = req.query.from ? new Date(req.query.from) : new Date();\r\n  console.log(new Date())\r\n  const creatorId = req.query.by;\r\n  const posts = await req.db\r\n    .collection('posts')\r\n    .find({\r\n      createdAt: {\r\n        $lte: from,\r\n      },\r\n      ...(creatorId && { creatorId }),\r\n    })\r\n    .sort({ createdAt: -1 })\r\n    .limit(parseInt(req.query.limit, 10) || 10)\r\n    .toArray();\r\n  res.send({ posts });\r\n});\r\n\r\nhandler.post(async (req, res) => {\r\n  if (!req.user) {\r\n    return res.status(401).send('unauthenticated');\r\n  }\r\n\r\n  const { image_link, caption, author, source, source_link, \r\n    category, headings, abstract_cat, content} = req.body;\r\n\r\n  if (!content) return res.status(400).send('You must write something');\r\n\r\n  const post = {\r\n    _id: nanoid(),\r\n    image_link, \r\n    caption, \r\n    author, \r\n    source, \r\n    source_link, \r\n    category, \r\n    headings, \r\n    abstract_cat, \r\n    content,\r\n    createdAt: new Date().toString().slice(0,16),\r\n    creatorId: req.user._id,\r\n  };\r\n\r\n  await req.db.collection('posts').insertOne(post);\r\n  return res.send(post);\r\n});\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}