{"ast":null,"code":"import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nimport cors from 'cors';\nconst handler = nextConnect();\nconst corsOptions = {\n  origin: process.env.HOST\n};\nhandler.use(cors(corsOptions)).use(middleware);\nhandler.get(async (req, res) => res.send(\"welcome\"));\nhandler.post(async (req, res) => {\n  const email = normalizeEmail(req.body.email);\n  console.log(req.body.email);\n  const {\n    name,\n    password\n  } = req.body;\n\n  if (!name) {\n    res.status(400).send(\"Name is  required\");\n    return;\n  }\n\n  if (!isEmail(email)) {\n    res.status(400).send(\"invalid email\");\n    return;\n  }\n\n  if (!password) {\n    res.status(400).send(\"Password is required\");\n    return;\n  }\n\n  if ((await req.db.collection('users').countDocuments({\n    email\n  })) > 0) {\n    res.status(400).send(\"Email already exist\");\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 10);\n  const user = await req.db.collection('users').insertOne({\n    _id: nanoid(12),\n    name,\n    email,\n    password: hashedPassword,\n    isVerified: false\n  }).then(({\n    ops\n  }) => ops[0]);\n  req.logIn(user, err => {\n    if (err) throw err;\n    res.status(201).json({\n      user: extractUser(req)\n    });\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/users.js"],"names":["nextConnect","isEmail","normalizeEmail","bcrypt","nanoid","middleware","extractUser","cors","handler","corsOptions","origin","process","env","HOST","use","get","req","res","send","post","email","body","console","log","name","password","status","db","collection","countDocuments","hashedPassword","hash","user","insertOne","_id","isVerified","then","ops","logIn","err","json"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,OAAO,GAAGR,WAAW,EAA3B;AAEA,MAAMS,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADF,CAApB;AAIAL,OAAO,CAACM,GAAR,CAAYP,IAAI,CAACE,WAAD,CAAhB,EAA+BK,GAA/B,CAAmCT,UAAnC;AAGAG,OAAO,CAACO,GAAR,CAAY,OAAMC,GAAN,EAAWC,GAAX,KAAiBA,GAAG,CAACC,IAAJ,CAAS,SAAT,CAA7B;AAEAV,OAAO,CAACW,IAAR,CAAa,OAAOH,GAAP,EAAYC,GAAZ,KAAkB;AAE3B,QAAMG,KAAK,GAAGlB,cAAc,CAACc,GAAG,CAACK,IAAJ,CAASD,KAAV,CAA5B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACK,IAAJ,CAASD,KAArB;AACA,QAAM;AAACI,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAmBT,GAAG,CAACK,IAA7B;;AAEA,MAAG,CAACG,IAAJ,EAAS;AACLP,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,mBAArB;AACA;AACH;;AACD,MAAG,CAACjB,OAAO,CAACmB,KAAD,CAAX,EAAmB;AACfH,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,eAArB;AACA;AACH;;AACD,MAAG,CAACO,QAAJ,EAAa;AACTR,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,sBAArB;AACA;AACH;;AAED,MAAI,OAAMF,GAAG,CAACW,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BC,cAA3B,CAA0C;AAACT,IAAAA;AAAD,GAA1C,CAAN,IAAyD,CAA7D,EAAgE;AAC5DH,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,qBAArB;AACH;;AACD,QAAMY,cAAc,GAAG,MAAM3B,MAAM,CAAC4B,IAAP,CAAYN,QAAZ,EAAqB,EAArB,CAA7B;AACA,QAAMO,IAAI,GAAG,MAAMhB,GAAG,CAACW,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BK,SAA3B,CACf;AACIC,IAAAA,GAAG,EAAC9B,MAAM,CAAC,EAAD,CADd;AAEIoB,IAAAA,IAFJ;AAGIJ,IAAAA,KAHJ;AAIIK,IAAAA,QAAQ,EAACK,cAJb;AAKIK,IAAAA,UAAU,EAAC;AALf,GADe,EAQjBC,IARiB,CAQZ,CAAC;AAACC,IAAAA;AAAD,GAAD,KAASA,GAAG,CAAC,CAAD,CARA,CAAnB;AASArB,EAAAA,GAAG,CAACsB,KAAJ,CAAUN,IAAV,EAAiBO,GAAD,IAAO;AACnB,QAAGA,GAAH,EAAQ,MAAMA,GAAN;AACRtB,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AACjBR,MAAAA,IAAI,EAAC1B,WAAW,CAACU,GAAD;AADC,KAArB;AAGH,GALD;AAMH,CAtCD;AAwCA,eAAeR,OAAf","sourcesContent":["import nextConnect from 'next-connect';\r\nimport isEmail from 'validator/lib/isEmail';\r\nimport normalizeEmail from 'validator/lib/normalizeEmail';\r\nimport bcrypt from 'bcryptjs';\r\nimport { nanoid } from 'nanoid';\r\nimport middleware from '../../middlewares/middleware';\r\nimport { extractUser } from '../../lib/api-helper';\r\nimport cors from 'cors'\r\n\r\nconst handler = nextConnect();\r\n\r\nconst corsOptions = {\r\n  origin: process.env.HOST\r\n}\r\n\r\nhandler.use(cors(corsOptions)).use(middleware);\r\n\r\n\r\nhandler.get(async(req, res)=>res.send(\"welcome\"));\r\n\r\nhandler.post(async (req, res)=>{\r\n    \r\n    const email = normalizeEmail(req.body.email)\r\n    console.log(req.body.email)\r\n    const {name, password} = req.body;\r\n    \r\n    if(!name){\r\n        res.status(400).send(\"Name is  required\")\r\n        return;\r\n    }\r\n    if(!isEmail(email)){\r\n        res.status(400).send(\"invalid email\")\r\n        return;\r\n    }\r\n    if(!password){\r\n        res.status(400).send(\"Password is required\")\r\n        return;\r\n    }\r\n\r\n    if((await req.db.collection('users').countDocuments({email})>0)){\r\n        res.status(400).send(\"Email already exist\")\r\n    }\r\n    const hashedPassword = await bcrypt.hash(password,10);\r\n    const user = await req.db.collection('users').insertOne(\r\n        {\r\n            _id:nanoid(12),\r\n            name,\r\n            email,\r\n            password:hashedPassword,\r\n            isVerified:false,\r\n        }\r\n    ).then(({ops})=>ops[0]);\r\n    req.logIn(user, (err)=>{\r\n        if(err) throw err;\r\n        res.status(201).json({\r\n            user:extractUser(req)\r\n        })\r\n    })\r\n})\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}