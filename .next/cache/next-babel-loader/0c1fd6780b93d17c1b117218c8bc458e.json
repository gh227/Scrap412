{"ast":null,"code":"export async function getPosts(req, cat) {\n  const postsArray = await req.db.collection('posts').find({\n    category: cat\n  }).sort({\n    createdAt: -1\n  }).toArray();\n  if (!postsArray) return null;\n  const posts = postsArray.map(value => {\n    const {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    } = value;\n    return {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    };\n  });\n  return {\n    posts\n  };\n}\nexport async function getSingle(req, title) {\n  const singleFetch = await req.db.collection('posts').findOne({\n    caption: title\n  }); //console.log(title)\n\n  if (!singleFetch) return null;\n  const {\n    _id,\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content,\n    createdAt\n  } = singleFetch;\n  const single = {\n    _id,\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content,\n    createdAt: createdAt.toString()\n  };\n  return {\n    single\n  };\n}\nexport async function getSingleUpdated(req, _update, query) {\n  const singleFetch = await req.db.collection('posts').findOne({\n    [query]: _update\n  }); //console.log(title)\n\n  if (!singleFetch) return null;\n  const {\n    _id,\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content,\n    createdAt\n  } = singleFetch;\n  const single = {\n    _id,\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content,\n    createdAt: createdAt.toString()\n  };\n  return {\n    single\n  };\n}\nexport async function getLatest(req) {\n  const latestPosts = await req.db.collection('posts').find({\n    abstract_cat: 'latest_news'\n  }).limit(5).sort({\n    createdAt: -1\n  }).toArray();\n  if (!latestPosts) return null;\n  const latest_news = latestPosts.map(value => {\n    const {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    } = value;\n    return {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    };\n  });\n  return {\n    latest_news\n  };\n}\nexport async function getTopNews(req) {\n  const topNews = await req.db.collection('posts').find({\n    abstract_cat: 'top_stories'\n  }).limit(5).sort({\n    createdAt: -1\n  }).toArray();\n  if (!topNews) return null;\n  const top_news = topNews.map(value => {\n    const {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    } = value;\n    return {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    };\n  });\n  return {\n    top_news\n  };\n}","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/lib/db.js"],"names":["getPosts","req","cat","postsArray","db","collection","find","category","sort","createdAt","toArray","posts","map","value","_id","image_link","caption","author","source","source_link","headings","abstract_cat","content","getSingle","title","singleFetch","findOne","single","toString","getSingleUpdated","_update","query","getLatest","latestPosts","limit","latest_news","getTopNews","topNews","top_news"],"mappings":"AAAA,OAAO,eAAeA,QAAf,CAAwBC,GAAxB,EAA6BC,GAA7B,EAAkC;AACrC,QAAMC,UAAU,GAAG,MAAMF,GAAG,CAACG,EAAJ,CACxBC,UADwB,CACb,OADa,EAExBC,IAFwB,CAEnB;AAACC,IAAAA,QAAQ,EAACL;AAAV,GAFmB,EAGxBM,IAHwB,CAGnB;AAACC,IAAAA,SAAS,EAAC,CAAC;AAAZ,GAHmB,EAIxBC,OAJwB,EAAzB;AAMA,MAAI,CAACP,UAAL,EAAiB,OAAO,IAAP;AACjB,QAAMQ,KAAK,GAAGR,UAAU,CAACS,GAAX,CAAeC,KAAK,IAAI;AACpC,UAAM;AAACC,MAAAA,GAAD;AAAKC,MAAAA,UAAL;AAAgBC,MAAAA,OAAhB;AAAwBC,MAAAA,MAAxB;AAA+BC,MAAAA,MAA/B;AAAsCC,MAAAA,WAAtC;AAAkDZ,MAAAA,QAAlD;AAA2Da,MAAAA,QAA3D;AAAoEC,MAAAA,YAApE;AAAiFC,MAAAA;AAAjF,QAA2FT,KAAjG;AACA,WAAO;AACLC,MAAAA,GADK;AAELC,MAAAA,UAFK;AAGLC,MAAAA,OAHK;AAILC,MAAAA,MAJK;AAKLC,MAAAA,MALK;AAMLC,MAAAA,WANK;AAOLZ,MAAAA,QAPK;AAQLa,MAAAA,QARK;AASLC,MAAAA,YATK;AAUPC,MAAAA;AAVO,KAAP;AAWD,GAba,CAAd;AAcA,SAAO;AAACX,IAAAA;AAAD,GAAP;AACD;AAED,OAAO,eAAeY,SAAf,CAAyBtB,GAAzB,EAA8BuB,KAA9B,EAAqC;AAC1C,QAAMC,WAAW,GAAG,MAAMxB,GAAG,CAACG,EAAJ,CACzBC,UADyB,CACd,OADc,EAEzBqB,OAFyB,CAEjB;AAACV,IAAAA,OAAO,EAACQ;AAAT,GAFiB,CAA1B,CAD0C,CAI1C;;AAEA,MAAI,CAACC,WAAL,EAAkB,OAAO,IAAP;AAChB,QAAM;AAACX,IAAAA,GAAD;AAAKC,IAAAA,UAAL;AAAgBC,IAAAA,OAAhB;AAAwBC,IAAAA,MAAxB;AAA+BC,IAAAA,MAA/B;AAAsCC,IAAAA,WAAtC;AAAkDZ,IAAAA,QAAlD;AAA2Da,IAAAA,QAA3D;AAAoEC,IAAAA,YAApE;AAAiFC,IAAAA,OAAjF;AAA0Fb,IAAAA;AAA1F,MAAsGgB,WAA5G;AACC,QAAME,MAAM,GAAE;AACbb,IAAAA,GADa;AAEbC,IAAAA,UAFa;AAGbC,IAAAA,OAHa;AAIbC,IAAAA,MAJa;AAKbC,IAAAA,MALa;AAMbC,IAAAA,WANa;AAObZ,IAAAA,QAPa;AAQba,IAAAA,QARa;AASbC,IAAAA,YATa;AAUbC,IAAAA,OAVa;AAWbb,IAAAA,SAAS,EAACA,SAAS,CAACmB,QAAV;AAXG,GAAd;AAcH,SAAO;AAACD,IAAAA;AAAD,GAAP;AACD;AAED,OAAO,eAAeE,gBAAf,CAAgC5B,GAAhC,EAAqC6B,OAArC,EAA8CC,KAA9C,EAAqD;AAC1D,QAAMN,WAAW,GAAG,MAAMxB,GAAG,CAACG,EAAJ,CAEzBC,UAFyB,CAEd,OAFc,EAGzBqB,OAHyB,CAGjB;AAAC,KAACK,KAAD,GAASD;AAAV,GAHiB,CAA1B,CAD0D,CAK1D;;AAEA,MAAI,CAACL,WAAL,EAAkB,OAAO,IAAP;AAChB,QAAM;AAACX,IAAAA,GAAD;AAAKC,IAAAA,UAAL;AAAgBC,IAAAA,OAAhB;AAAwBC,IAAAA,MAAxB;AAA+BC,IAAAA,MAA/B;AAAsCC,IAAAA,WAAtC;AAAkDZ,IAAAA,QAAlD;AAA2Da,IAAAA,QAA3D;AAAoEC,IAAAA,YAApE;AAAiFC,IAAAA,OAAjF;AAA0Fb,IAAAA;AAA1F,MAAsGgB,WAA5G;AACC,QAAME,MAAM,GAAE;AACbb,IAAAA,GADa;AAEbC,IAAAA,UAFa;AAGbC,IAAAA,OAHa;AAIbC,IAAAA,MAJa;AAKbC,IAAAA,MALa;AAMbC,IAAAA,WANa;AAObZ,IAAAA,QAPa;AAQba,IAAAA,QARa;AASbC,IAAAA,YATa;AAUbC,IAAAA,OAVa;AAWbb,IAAAA,SAAS,EAACA,SAAS,CAACmB,QAAV;AAXG,GAAd;AAcH,SAAO;AAACD,IAAAA;AAAD,GAAP;AACD;AAED,OAAO,eAAeK,SAAf,CAAyB/B,GAAzB,EAA6B;AAClC,QAAMgC,WAAW,GAAG,MAAMhC,GAAG,CAACG,EAAJ,CACzBC,UADyB,CACd,OADc,EAEzBC,IAFyB,CAEpB;AAACe,IAAAA,YAAY,EAAC;AAAd,GAFoB,EAGzBa,KAHyB,CAGnB,CAHmB,EAIzB1B,IAJyB,CAIpB;AAACC,IAAAA,SAAS,EAAC,CAAC;AAAZ,GAJoB,EAKzBC,OALyB,EAA1B;AAOA,MAAI,CAACuB,WAAL,EAAkB,OAAO,IAAP;AAClB,QAAME,WAAW,GAAGF,WAAW,CAACrB,GAAZ,CAAgBC,KAAK,IAAI;AAC3C,UAAM;AAACC,MAAAA,GAAD;AAAKC,MAAAA,UAAL;AAAgBC,MAAAA,OAAhB;AAAwBC,MAAAA,MAAxB;AAA+BC,MAAAA,MAA/B;AAAsCC,MAAAA,WAAtC;AAAkDZ,MAAAA,QAAlD;AAA2Da,MAAAA,QAA3D;AAAoEC,MAAAA,YAApE;AAAiFC,MAAAA;AAAjF,QAA2FT,KAAjG;AACA,WAAO;AACLC,MAAAA,GADK;AAELC,MAAAA,UAFK;AAGLC,MAAAA,OAHK;AAILC,MAAAA,MAJK;AAKLC,MAAAA,MALK;AAMLC,MAAAA,WANK;AAOLZ,MAAAA,QAPK;AAQLa,MAAAA,QARK;AASLC,MAAAA,YATK;AAUPC,MAAAA;AAVO,KAAP;AAWD,GAbmB,CAApB;AAcA,SAAO;AAACa,IAAAA;AAAD,GAAP;AACD;AAED,OAAO,eAAeC,UAAf,CAA0BnC,GAA1B,EAA8B;AAEnC,QAAMoC,OAAO,GAAG,MAAOpC,GAAG,CAACG,EAAJ,CACtBC,UADsB,CACX,OADW,EAEtBC,IAFsB,CAEjB;AAACe,IAAAA,YAAY,EAAC;AAAd,GAFiB,EAGtBa,KAHsB,CAGhB,CAHgB,EAItB1B,IAJsB,CAIjB;AAACC,IAAAA,SAAS,EAAC,CAAC;AAAZ,GAJiB,EAKtBC,OALsB,EAAvB;AAOA,MAAI,CAAC2B,OAAL,EAAc,OAAO,IAAP;AAEd,QAAMC,QAAQ,GAAGD,OAAO,CAACzB,GAAR,CAAYC,KAAK,IAAI;AACpC,UAAM;AAACC,MAAAA,GAAD;AAAKC,MAAAA,UAAL;AAAgBC,MAAAA,OAAhB;AAAwBC,MAAAA,MAAxB;AAA+BC,MAAAA,MAA/B;AAAsCC,MAAAA,WAAtC;AAAkDZ,MAAAA,QAAlD;AAA2Da,MAAAA,QAA3D;AAAoEC,MAAAA,YAApE;AAAiFC,MAAAA;AAAjF,QAA2FT,KAAjG;AACA,WAAO;AACLC,MAAAA,GADK;AAELC,MAAAA,UAFK;AAGLC,MAAAA,OAHK;AAILC,MAAAA,MAJK;AAKLC,MAAAA,MALK;AAMLC,MAAAA,WANK;AAOLZ,MAAAA,QAPK;AAQLa,MAAAA,QARK;AASLC,MAAAA,YATK;AAUPC,MAAAA;AAVO,KAAP;AAWD,GAbgB,CAAjB;AAcA,SAAO;AAACgB,IAAAA;AAAD,GAAP;AACD","sourcesContent":["export async function getPosts(req, cat) {\n    const postsArray = await req.db\n    .collection('posts')\n    .find({category:cat})\n    .sort({createdAt:-1})\n    .toArray();\n\n    if (!postsArray) return null;\n    const posts = postsArray.map(value => {\n      const {_id,image_link,caption,author,source,source_link,category,headings,abstract_cat,content} =value\n      return {\n        _id,\n        image_link,\n        caption,\n        author,\n        source,\n        source_link,\n        category,\n        headings,\n        abstract_cat,\n      content}\n    });\n    return {posts}\n  }\n\n  export async function getSingle(req, title) {\n    const singleFetch = await req.db\n    .collection('posts')\n    .findOne({caption:title});\n    //console.log(title)\n\n    if (!singleFetch) return null;\n      const {_id,image_link,caption,author,source,source_link,category,headings,abstract_cat,content, createdAt} =singleFetch\n       const single ={\n        _id,\n        image_link,\n        caption,\n        author,\n        source,\n        source_link,\n        category,\n        headings,\n        abstract_cat,\n        content,\n        createdAt:createdAt.toString()\n    }\n  \n    return {single} \n  }\n\n  export async function getSingleUpdated(req, _update, query) {\n    const singleFetch = await req.db\n   \n    .collection('posts')\n    .findOne({[query]: _update});\n    //console.log(title)\n\n    if (!singleFetch) return null;\n      const {_id,image_link,caption,author,source,source_link,category,headings,abstract_cat,content, createdAt} =singleFetch\n       const single ={\n        _id,\n        image_link,\n        caption,\n        author,\n        source,\n        source_link,\n        category,\n        headings,\n        abstract_cat,\n        content,\n        createdAt:createdAt.toString()\n    }\n  \n    return {single} \n  }\n\n  export async function getLatest(req){\n    const latestPosts = await req.db\n    .collection('posts')\n    .find({abstract_cat:'latest_news'})\n    .limit(5)\n    .sort({createdAt:-1})\n    .toArray();\n\n    if (!latestPosts) return null;\n    const latest_news = latestPosts.map(value => {\n      const {_id,image_link,caption,author,source,source_link,category,headings,abstract_cat,content} =value\n      return {\n        _id,\n        image_link,\n        caption,\n        author,\n        source,\n        source_link,\n        category,\n        headings,\n        abstract_cat,\n      content}\n    });\n    return {latest_news}\n  }\n\n  export async function getTopNews(req){\n      \n    const topNews = await  req.db\n    .collection('posts')\n    .find({abstract_cat:'top_stories'})\n    .limit(5)\n    .sort({createdAt:-1})\n    .toArray();\n\n    if (!topNews) return null;\n    \n    const top_news = topNews.map(value => {\n      const {_id,image_link,caption,author,source,source_link,category,headings,abstract_cat,content} =value\n      return {\n        _id,\n        image_link,\n        caption,\n        author,\n        source,\n        source_link,\n        category,\n        headings,\n        abstract_cat,\n      content}\n    });\n    return {top_news}\n  }"]},"metadata":{},"sourceType":"module"}