{"ast":null,"code":"export async function getPosts(req, cat) {\n  const postsArray = await req.db.collection('posts').find({\n    category: cat\n  }).sort({\n    createdAt: -1\n  }).toArray();\n  if (!postsArray) return null;\n  const posts = postsArray.map(value => {\n    const {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    } = value;\n    return {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    };\n  });\n  return {\n    posts\n  };\n}\nexport async function getSingle(req, title) {\n  const singleFetch = await req.db.collection('posts').findOne({\n    caption: title\n  });\n  if (!singleFetch) return null;\n  const {\n    _id,\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content\n  } = singleFetch;\n  const single = {\n    _id,\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content\n  };\n  return {\n    single\n  };\n}\nexport async function getLatest(req) {\n  const latestPosts = await req.db.collection('posts').find({\n    abstract_cat: 'latest_news'\n  }).sort({\n    createdAt: -1\n  }).toArray();\n  if (!latestPosts) return null;\n  const latest_news = latestPosts.map(value => {\n    const {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    } = value;\n    return {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    };\n  });\n  return {\n    latest_news\n  };\n}\nexport async function getTopNews(req) {\n  const topNews = await req.db.collection('posts').find({\n    abstract_cat: 'top_stories'\n  }).sort({\n    createdAt: -1\n  }).toArray();\n  if (!topNews) return null;\n  const top_news = topNews.map(value => {\n    const {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    } = value;\n    return {\n      _id,\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content\n    };\n  });\n  return {\n    top_news\n  };\n}","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/lib/db.js"],"names":["getPosts","req","cat","postsArray","db","collection","find","category","sort","createdAt","toArray","posts","map","value","_id","image_link","caption","author","source","source_link","headings","abstract_cat","content","getSingle","title","singleFetch","findOne","single","getLatest","latestPosts","latest_news","getTopNews","topNews","top_news"],"mappings":"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","sourcesContent":["export async function getPosts(req, cat) {\r\n    const postsArray = await req.db\r\n    .collection('posts')\r\n    .find({category:cat})\r\n    .sort({createdAt:-1})\r\n    .toArray();\r\n\r\n    if (!postsArray) return null;\r\n    const posts = postsArray.map(value => {\r\n      const {_id,image_link,caption,author,source,source_link,category,headings,abstract_cat,content} =value\r\n      return {\r\n        _id,\r\n        image_link,\r\n        caption,\r\n        author,\r\n        source,\r\n        source_link,\r\n        category,\r\n        headings,\r\n        abstract_cat,\r\n      content}\r\n    });\r\n    return {posts}\r\n  }\r\n\r\n  export async function getSingle(req, title) {\r\n    const singleFetch = await req.db\r\n    .collection('posts')\r\n    .findOne({caption:title});\r\n\r\n    if (!singleFetch) return null;\r\n      const {_id,image_link,caption,author,source,source_link,category,headings,abstract_cat,content} =singleFetch\r\n       const single ={\r\n        _id,\r\n        image_link,\r\n        caption,\r\n        author,\r\n        source,\r\n        source_link,\r\n        category,\r\n        headings,\r\n        abstract_cat,\r\n      content}\r\n  \r\n    return {single} \r\n  }\r\n\r\n  export async function getLatest(req){\r\n    const latestPosts = await req.db\r\n    .collection('posts')\r\n    .find({abstract_cat:'latest_news'})\r\n    .sort({createdAt:-1})\r\n    .toArray();\r\n\r\n    if (!latestPosts) return null;\r\n    const latest_news = latestPosts.map(value => {\r\n      const {_id,image_link,caption,author,source,source_link,category,headings,abstract_cat,content} =value\r\n      return {\r\n        _id,\r\n        image_link,\r\n        caption,\r\n        author,\r\n        source,\r\n        source_link,\r\n        category,\r\n        headings,\r\n        abstract_cat,\r\n      content}\r\n    });\r\n    return {latest_news}\r\n  }\r\n\r\n  export async function getTopNews(req){\r\n      \r\n    const topNews = await  req.db\r\n    .collection('posts')\r\n    .find({abstract_cat:'top_stories'})\r\n    .sort({createdAt:-1})\r\n    .toArray();\r\n\r\n    if (!topNews) return null;\r\n    \r\n    const top_news = topNews.map(value => {\r\n      const {_id,image_link,caption,author,source,source_link,category,headings,abstract_cat,content} =value\r\n      return {\r\n        _id,\r\n        image_link,\r\n        caption,\r\n        author,\r\n        source,\r\n        source_link,\r\n        category,\r\n        headings,\r\n        abstract_cat,\r\n      content}\r\n    });\r\n    return {top_news}\r\n  }"]},"metadata":{},"sourceType":"module"}