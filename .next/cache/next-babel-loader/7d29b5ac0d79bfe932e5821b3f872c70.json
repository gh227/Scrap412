{"ast":null,"code":"import nextConnect from 'next-connect';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../../middlewares/middleware';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.get(async (req, res) => {\n  // Pagination: Fetch posts from before the input date or fetch from newest\n  const from = req.query.from ? new Date(req.query.from) : new Date();\n  const creatorId = req.query.by;\n  const posts = await req.db.collection('posts').find();\n  res.status(201).json(posts);\n});\nhandler.post(async (req, res) => {\n  if (!req.user) {\n    return res.status(401).send('unauthenticated');\n  }\n\n  const {\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content\n  } = req.body;\n  if (!content) return res.status(400).send('You must write something');\n  const post = {\n    _id: nanoid(),\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content,\n    createdAt: new Date().toString().slice(0, 16),\n    creatorId: req.user._id\n  };\n  await req.db.collection('posts').insertOne(post);\n  return res.send(post);\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/posts/index.js"],"names":["nextConnect","nanoid","middleware","handler","use","get","req","res","from","query","Date","creatorId","by","posts","db","collection","find","status","json","post","user","send","image_link","caption","author","source","source_link","category","headings","abstract_cat","content","body","_id","createdAt","toString","slice","insertOne"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AAEA,MAAMC,OAAO,GAAGH,WAAW,EAA3B;AAEAG,OAAO,CAACC,GAAR,CAAYF,UAAZ;AAEAC,OAAO,CAACE,GAAR,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC9B;AACA,QAAMC,IAAI,GAAGF,GAAG,CAACG,KAAJ,CAAUD,IAAV,GAAiB,IAAIE,IAAJ,CAASJ,GAAG,CAACG,KAAJ,CAAUD,IAAnB,CAAjB,GAA4C,IAAIE,IAAJ,EAAzD;AACA,QAAMC,SAAS,GAAGL,GAAG,CAACG,KAAJ,CAAUG,EAA5B;AACA,QAAMC,KAAK,GAAG,MAAMP,GAAG,CAACQ,EAAJ,CACjBC,UADiB,CACN,OADM,EAEjBC,IAFiB,EAApB;AAGAT,EAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,KAArB;AACD,CARD;AAUAV,OAAO,CAACgB,IAAR,CAAa,OAAOb,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,MAAI,CAACD,GAAG,CAACc,IAAT,EAAe;AACb,WAAOb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB,iBAArB,CAAP;AACD;;AAED,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA,MAAvB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA,WAAvC;AACJC,IAAAA,QADI;AACMC,IAAAA,QADN;AACgBC,IAAAA,YADhB;AAC8BC,IAAAA;AAD9B,MACyCxB,GAAG,CAACyB,IADnD;AAGA,MAAI,CAACD,OAAL,EAAc,OAAOvB,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB,0BAArB,CAAP;AAEd,QAAMF,IAAI,GAAG;AACXa,IAAAA,GAAG,EAAE/B,MAAM,EADA;AAEXqB,IAAAA,UAFW;AAGXC,IAAAA,OAHW;AAIXC,IAAAA,MAJW;AAKXC,IAAAA,MALW;AAMXC,IAAAA,WANW;AAOXC,IAAAA,QAPW;AAQXC,IAAAA,QARW;AASXC,IAAAA,YATW;AAUXC,IAAAA,OAVW;AAWXG,IAAAA,SAAS,EAAE,IAAIvB,IAAJ,GAAWwB,QAAX,GAAsBC,KAAtB,CAA4B,CAA5B,EAA8B,EAA9B,CAXA;AAYXxB,IAAAA,SAAS,EAAEL,GAAG,CAACc,IAAJ,CAASY;AAZT,GAAb;AAeA,QAAM1B,GAAG,CAACQ,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BqB,SAA3B,CAAqCjB,IAArC,CAAN;AACA,SAAOZ,GAAG,CAACc,IAAJ,CAASF,IAAT,CAAP;AACD,CA3BD;AA6BA,eAAehB,OAAf","sourcesContent":["import nextConnect from 'next-connect';\r\nimport { nanoid } from 'nanoid';\r\nimport middleware from '../../../middlewares/middleware';\r\n\r\nconst handler = nextConnect();\r\n\r\nhandler.use(middleware);\r\n\r\nhandler.get(async (req, res) => {\r\n  // Pagination: Fetch posts from before the input date or fetch from newest\r\n  const from = req.query.from ? new Date(req.query.from) : new Date();\r\n  const creatorId = req.query.by;\r\n  const posts = await req.db\r\n    .collection('posts')\r\n    .find()\r\n  res.status(201).json(posts);\r\n});\r\n\r\nhandler.post(async (req, res) => {\r\n  if (!req.user) {\r\n    return res.status(401).send('unauthenticated');\r\n  }\r\n\r\n  const { image_link, caption, author, source, source_link, \r\n    category, headings, abstract_cat, content} = req.body;\r\n\r\n  if (!content) return res.status(400).send('You must write something');\r\n\r\n  const post = {\r\n    _id: nanoid(),\r\n    image_link, \r\n    caption, \r\n    author, \r\n    source, \r\n    source_link, \r\n    category, \r\n    headings, \r\n    abstract_cat, \r\n    content,\r\n    createdAt: new Date().toString().slice(0,16),\r\n    creatorId: req.user._id,\r\n  };\r\n\r\n  await req.db.collection('posts').insertOne(post);\r\n  return res.send(post);\r\n});\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}