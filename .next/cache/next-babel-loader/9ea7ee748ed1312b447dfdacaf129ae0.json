{"ast":null,"code":"import nextConnect from 'next-connect';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../../middlewares/middleware';\nimport cors from 'cors';\nconst handler = nextConnect();\nhandler.use(cors({\n  methods: 'POST'\n})).use(middleware);\nconsole.log('hit posts');\nhandler.get(async (req, res) => {\n  const posts = await req.db.collection('posts').find({}).sort({\n    createdAt: -1\n  }).toArray(); //console.log(req.headers)\n\n  res.send({\n    posts\n  });\n});\nhandler.post(async (req, res) => {\n  /*if (!req.user) {\n    return res.status(401).send('unauthenticated');\n  }*/\n  const {\n    phoneNumber,\n    code\n  } = req.body; //if (!content) return res.status(400).send('You must write something');\n\n  const post = {\n    phoneNumber,\n    code,\n    createdAt: new Date(),\n    updatedAt: ''\n  };\n  await req.db.collection('posts').insertOne(post);\n  return res.send(post);\n});\nhandler.put(async (req, res) => {\n  const {\n    post_id,\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content\n  } = req.body;\n  const myQuery = {\n    _id: post_id\n  };\n  const updateValues = {\n    $set: {\n      phoneNumber,\n      code,\n      updatedAt: new Date()\n    }\n  };\n  await req.db.collection(\"posts\").updateOne(myQuery, updateValues, function (err, res) {\n    if (err) throw err;\n  });\n  res.send('welcome update');\n});\nhandler.delete(async (req, res) => {\n  const {\n    post_id\n  } = req.body;\n  console.log(req.body);\n  await req.db.collection('posts').deleteOne({\n    _id: post_id\n  }, (err, obj) => {\n    if (err) throw err;\n    console.log(obj);\n  });\n  res.send(\"sucessfull\");\n});\nexport default handler;","map":{"version":3,"sources":["c:/Users/hero/Documents/documents/projects/Next/pages/api/posts/index.js"],"names":["nextConnect","nanoid","middleware","cors","handler","use","methods","console","log","get","req","res","posts","db","collection","find","sort","createdAt","toArray","send","post","phoneNumber","code","body","Date","updatedAt","insertOne","put","post_id","image_link","caption","author","source","source_link","category","headings","abstract_cat","content","myQuery","_id","updateValues","$set","updateOne","err","delete","deleteOne","obj"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../../middlewares/middleware';\nimport cors from 'cors'\n\nconst handler = nextConnect();\n\n\n\n\n\nhandler.use(cors({methods:'POST'})).use(middleware);\nconsole.log('hit posts')\nhandler.get(async (req, res) => {\n\n  const posts = await req.db\n    .collection('posts')\n    .find({})\n    .sort({createdAt:-1})\n    .toArray();\n    //console.log(req.headers)\n  res.send({posts})\n});\n\nhandler.post(async (req, res) => {\n    \n  /*if (!req.user) {\n    return res.status(401).send('unauthenticated');\n  }*/\n\n  const { phoneNumber, code} = req.body;\n\n  //if (!content) return res.status(400).send('You must write something');\n\n  const post = {\n    phoneNumber,\n    code,\n    createdAt: new Date(),\n    updatedAt:''\n  };\n\n  await req.db.collection('posts').insertOne(post);\n  return res.send(post);\n});\n\nhandler.put( async(req, res)=>{\n  \n  const {post_id, image_link, caption, author, source, source_link, \n    category, headings, abstract_cat, content} = req.body;\n  \n    const myQuery = {_id:post_id};\n    const updateValues = {$set:{ \n    phoneNumber,\n    code,\n    updatedAt:new Date(),\n    }};\n\n    await req.db.collection(\"posts\").updateOne(myQuery, updateValues, function(err, res) {\n      if (err) throw err;\n      \n    });\n  res.send('welcome update')\n})\n\nhandler.delete(async(req, res)=>{\n  const {post_id} = req.body;\nconsole.log(req.body);\n  await req.db.collection('posts').deleteOne({_id:post_id}, (err, obj)=>{\n      if(err) throw err;\n    console.log(obj)\n  });\n  res.send(\"sucessfull\");\n})\n\n\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}