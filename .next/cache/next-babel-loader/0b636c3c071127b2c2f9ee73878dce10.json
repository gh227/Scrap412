{"ast":null,"code":"import nextConnect from 'next-connect';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../../middlewares/middleware';\nimport cors from 'cors';\nconst handler = nextConnect();\nhandler.use(cors({\n  origin: 'https://ifactonews.com',\n  HttpOnly: true\n})).use(middleware);\nhandler.get(async (req, res) => {\n  const posts = await req.db.collection('posts').find({}).sort({\n    createdAt: -1\n  }).toArray();\n  console.log('request ip :', req.ip, 'ano : ', req.connection.remoteAddress, 'or ano : ', req.connection.socket.remoteAddress);\n  res.send({\n    posts\n  });\n});\nhandler.post(async (req, res) => {\n  if (!req.user) {\n    return res.status(401).send('unauthenticated');\n  }\n\n  const {\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content\n  } = req.body;\n  if (!content) return res.status(400).send('You must write something');\n  const post = {\n    _id: nanoid(),\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content,\n    createdAt: new Date(),\n    creatorId: req.user._id,\n    updatedAt: ''\n  };\n  await req.db.collection('posts').insertOne(post);\n  return res.send(post);\n});\nhandler.put(async (req, res) => {\n  const {\n    post_id,\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content\n  } = req.body;\n  const myQuery = {\n    _id: post_id\n  };\n  const updateValues = {\n    $set: {\n      image_link,\n      caption,\n      author,\n      source,\n      source_link,\n      category,\n      headings,\n      abstract_cat,\n      content,\n      updatedAt: new Date()\n    }\n  };\n  await req.db.collection(\"posts\").updateOne(myQuery, updateValues, function (err, res) {\n    if (err) throw err;\n  });\n  res.send('welcome update');\n});\nhandler.delete(async (req, res) => {\n  const {\n    post_id\n  } = req.body;\n  console.log(req.body);\n  await req.db.collection('posts').deleteOne({\n    _id: post_id\n  }, (err, obj) => {\n    if (err) throw err;\n    console.log(obj);\n  });\n  res.send(\"sucessfull\");\n});\nexport default handler;","map":{"version":3,"sources":["c:/Users/hero/Documents/projects/Next/pages/api/posts/index.js"],"names":["nextConnect","nanoid","middleware","cors","handler","use","origin","HttpOnly","get","req","res","posts","db","collection","find","sort","createdAt","toArray","console","log","ip","connection","remoteAddress","socket","send","post","user","status","image_link","caption","author","source","source_link","category","headings","abstract_cat","content","body","_id","Date","creatorId","updatedAt","insertOne","put","post_id","myQuery","updateValues","$set","updateOne","err","delete","deleteOne","obj"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../../middlewares/middleware';\nimport cors from 'cors'\n\nconst handler = nextConnect();\n\n\n\n\n\nhandler.use(cors({origin:'https://ifactonews.com', HttpOnly:true})).use(middleware);\n\nhandler.get(async (req, res) => {\n\n  const posts = await req.db\n    .collection('posts')\n    .find({})\n    .sort({createdAt:-1})\n    .toArray();\n     console.log('request ip :', req.ip, 'ano : ', req.connection.remoteAddress, 'or ano : ', req.connection.socket.remoteAddress)\n  res.send({posts})\n});\n\nhandler.post(async (req, res) => {\n    \n  if (!req.user) {\n    return res.status(401).send('unauthenticated');\n  }\n\n  const { image_link, caption, author, source, source_link, \n    category, headings, abstract_cat, content} = req.body;\n\n  if (!content) return res.status(400).send('You must write something');\n\n  const post = {\n    _id: nanoid(),\n    image_link, \n    caption, \n    author, \n    source, \n    source_link, \n    category, \n    headings, \n    abstract_cat, \n    content,\n    createdAt: new Date(),\n    creatorId: req.user._id,\n    updatedAt:''\n  };\n\n  await req.db.collection('posts').insertOne(post);\n  return res.send(post);\n});\n\nhandler.put( async(req, res)=>{\n  \n  const {post_id, image_link, caption, author, source, source_link, \n    category, headings, abstract_cat, content} = req.body;\n  \n    const myQuery = {_id:post_id};\n    const updateValues = {$set:{\n    image_link, \n    caption, \n    author, \n    source, \n    source_link, \n    category, \n    headings, \n    abstract_cat, \n    content,\n    updatedAt:new Date(),\n    }};\n\n    await req.db.collection(\"posts\").updateOne(myQuery, updateValues, function(err, res) {\n      if (err) throw err;\n      \n    });\n  res.send('welcome update')\n})\n\nhandler.delete(async(req, res)=>{\n  const {post_id} = req.body;\nconsole.log(req.body);\n  await req.db.collection('posts').deleteOne({_id:post_id}, (err, obj)=>{\n      if(err) throw err;\n    console.log(obj)\n  });\n  res.send(\"sucessfull\");\n})\n\n\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}