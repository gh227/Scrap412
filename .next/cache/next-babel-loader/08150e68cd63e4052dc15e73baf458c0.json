{"ast":null,"code":"var Cors = require('cors'); // Initializing the cors middleware\n\n\nconst cors = Cors({\n  methods: ['GET']\n}); // Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\n\nfunction runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    fn(req, res, result => {\n      console.log(result);\n\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n}\n\nasync function handler(req, res) {\n  // Run the middleware\n  await runMiddleware(req, res, cors); // Rest of the API logic\n\n  res.json({\n    message: 'Hello Everyone!'\n  });\n}\n\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/users.js"],"names":["Cors","require","cors","methods","runMiddleware","req","res","fn","Promise","resolve","reject","result","console","log","Error","handler","json","message"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB,C,CAEA;;;AACA,MAAMC,IAAI,GAAGF,IAAI,CAAC;AAChBG,EAAAA,OAAO,EAAE,CAAC,KAAD;AADO,CAAD,CAAjB,C,CAIA;AACA;;AACA,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,EAAjC,EAAqC;AACnC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEtCH,IAAAA,EAAE,CAACF,GAAD,EAAMC,GAAN,EAAYK,MAAD,IAAY;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACF,UAAIA,MAAM,YAAYG,KAAtB,EAA6B;AAC3B,eAAOJ,MAAM,CAACC,MAAD,CAAb;AACD;;AAED,aAAOF,OAAO,CAACE,MAAD,CAAd;AACD,KAPC,CAAF;AAQD,GAVM,CAAP;AAWD;;AAED,eAAeI,OAAf,CAAuBV,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B;AACA,QAAMF,aAAa,CAACC,GAAD,EAAMC,GAAN,EAAWJ,IAAX,CAAnB,CAF+B,CAI/B;;AACAI,EAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAT;AACD;;AAED,eAAeF,OAAf","sourcesContent":["var Cors = require('cors')\n\n// Initializing the cors middleware\nconst cors = Cors({\n  methods: ['GET'],\n})\n\n// Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\nfunction runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n      \n    fn(req, res, (result) => {\n        console.log(result)\n      if (result instanceof Error) {\n        return reject(result)\n      }\n\n      return resolve(result)\n    })\n  })\n}\n\nasync function handler(req, res) {\n  // Run the middleware\n  await runMiddleware(req, res, cors)\n\n  // Rest of the API logic\n  res.json({ message: 'Hello Everyone!' })\n}\n\nexport default handler"]},"metadata":{},"sourceType":"module"}