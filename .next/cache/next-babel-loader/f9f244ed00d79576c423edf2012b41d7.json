{"ast":null,"code":"import nextConnect from 'next-connect';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../../middlewares/middleware';\nimport cors from 'cors';\nconst handler = nextConnect();\nhandler.use(cors({\n  methods: 'POST'\n})).use(middleware);\nconsole.log('hit posts');\nhandler.get(async (req, res) => {\n  const posts = await req.db.collection('posts').find({}).sort({\n    createdAt: -1\n  }).toArray(); //console.log(req.headers)\n\n  res.send({\n    posts\n  });\n});\nhandler.post(async (req, res) => {\n  /*if (!req.user) {\n    return res.status(401).send('unauthenticated');\n  }*/\n  const {\n    phoneNumber,\n    code\n  } = req.body; //if (!content) return res.status(400).send('You must write something');\n\n  const post = {\n    _id: nanoid(),\n    phoneNumber,\n    code,\n    createdAt: new Date(),\n    updatedAt: ''\n  };\n  await req.db.collection('posts').insertOne(post);\n  return res.send(post);\n});\nhandler.put(async (req, res) => {\n  const {\n    phoneNumber,\n    code\n  } = req.body;\n  const myQuery = {\n    phoneNumber: phoneNumber\n  };\n  const updateValues = {\n    $set: {\n      phoneNumber,\n      code,\n      updatedAt: new Date()\n    }\n  };\n  await req.db.collection(\"posts\").updateOne(myQuery, updateValues, function (err, res) {\n    if (err) throw err;\n  });\n  res.send('welcome update');\n});\nhandler.delete(async (req, res) => {\n  const {\n    post_id\n  } = req.body;\n  console.log(req.body);\n  await req.db.collection('posts').deleteOne({\n    _id: post_id\n  }, (err, obj) => {\n    if (err) throw err;\n    console.log(obj);\n  });\n  res.send(\"sucessfull\");\n});\nexport default handler;","map":{"version":3,"sources":["c:/Users/hero/Documents/documents/projects/Next/pages/api/posts/index.js"],"names":["nextConnect","nanoid","middleware","cors","handler","use","methods","console","log","get","req","res","posts","db","collection","find","sort","createdAt","toArray","send","post","phoneNumber","code","body","_id","Date","updatedAt","insertOne","put","myQuery","updateValues","$set","updateOne","err","delete","post_id","deleteOne","obj"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../../middlewares/middleware';\nimport cors from 'cors'\n\nconst handler = nextConnect();\n\n\n\n\n\nhandler.use(cors({methods:'POST'})).use(middleware);\nconsole.log('hit posts')\nhandler.get(async (req, res) => {\n\n  const posts = await req.db\n    .collection('posts')\n    .find({})\n    .sort({createdAt:-1})\n    .toArray();\n    //console.log(req.headers)\n  res.send({posts})\n});\n\nhandler.post(async (req, res) => {\n    \n  /*if (!req.user) {\n    return res.status(401).send('unauthenticated');\n  }*/\n\n  const { phoneNumber, code} = req.body;\n\n  //if (!content) return res.status(400).send('You must write something');\n\n  const post = {\n    _id: nanoid(),\n    phoneNumber,\n    code,\n    createdAt: new Date(),\n    updatedAt:''\n  };\n\n  await req.db.collection('posts').insertOne(post);\n  return res.send(post);\n});\n\nhandler.put( async(req, res)=>{\n  \n  const {phoneNumber, code} = req.body;\n  \n    const myQuery = {phoneNumber:phoneNumber};\n    const updateValues = {$set:{ \n    phoneNumber,\n    code,\n    updatedAt:new Date(),\n    }};\n\n    await req.db.collection(\"posts\").updateOne(myQuery, updateValues, function(err, res) {\n      if (err) throw err;\n      \n    });\n  res.send('welcome update')\n})\n\nhandler.delete(async(req, res)=>{\n  const {post_id} = req.body;\nconsole.log(req.body);\n  await req.db.collection('posts').deleteOne({_id:post_id}, (err, obj)=>{\n      if(err) throw err;\n    console.log(obj)\n  });\n  res.send(\"sucessfull\");\n})\n\n\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}