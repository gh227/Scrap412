{"ast":null,"code":"import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.post(async (req, res) => {\n  const email = normalizeEmail(req.email);\n  const {\n    name,\n    password\n  } = req.body;\n\n  if (!isEmail) {\n    res.status(400).send(\"invalid email\");\n    return;\n  }\n\n  if (!name) {\n    res.status(400).send(\"Name is  required\");\n    return;\n  }\n\n  if (!password) {\n    res.status(400).send(\"Password is required\");\n    return;\n  }\n\n  if ((await req.db.collection('users').countDocuments({\n    email\n  })) > 0) {\n    res.status(400).send(\"Email already exist\");\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 10);\n  const user = await req.db.collection('users').insertOne({\n    _id: nanoid(12),\n    name,\n    email,\n    password: hashedPassword,\n    isVerified: false\n  }).then(({\n    ops\n  }) => ops[0]);\n  res.logIn(user, err => {\n    if (err) throw err;\n    res.status(201).json({\n      user: extractUser(req)\n    });\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/users.js"],"names":["nextConnect","isEmail","normalizeEmail","bcrypt","nanoid","middleware","extractUser","handler","use","post","req","res","email","name","password","body","status","send","db","collection","countDocuments","hashedPassword","hash","user","insertOne","_id","isVerified","then","ops","logIn","err","json"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,MAAMC,OAAO,GAAGP,WAAW,EAA3B;AAEAO,OAAO,CAACC,GAAR,CAAYH,UAAZ;AAEAE,OAAO,CAACE,IAAR,CAAa,OAAOC,GAAP,EAAYC,GAAZ,KAAkB;AAC3B,QAAMC,KAAK,GAAIV,cAAc,CAACQ,GAAG,CAACE,KAAL,CAA7B;AACA,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAmBJ,GAAG,CAACK,IAA7B;;AACA,MAAG,CAACd,OAAJ,EAAY;AACRU,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AACA;AACH;;AACD,MAAG,CAACJ,IAAJ,EAAS;AACLF,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mBAArB;AACA;AACH;;AACD,MAAG,CAACH,QAAJ,EAAa;AACTH,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB;AACA;AACH;;AACD,MAAI,OAAMP,GAAG,CAACQ,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BC,cAA3B,CAA0C;AAACR,IAAAA;AAAD,GAA1C,CAAN,IAAyD,CAA7D,EAAgE;AAC5DD,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB;AACH;;AACD,QAAMI,cAAc,GAAG,MAAMlB,MAAM,CAACmB,IAAP,CAAYR,QAAZ,EAAqB,EAArB,CAA7B;AACA,QAAMS,IAAI,GAAG,MAAMb,GAAG,CAACQ,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BK,SAA3B,CACf;AACIC,IAAAA,GAAG,EAACrB,MAAM,CAAC,EAAD,CADd;AAEIS,IAAAA,IAFJ;AAGID,IAAAA,KAHJ;AAIIE,IAAAA,QAAQ,EAACO,cAJb;AAKIK,IAAAA,UAAU,EAAC;AALf,GADe,EAQjBC,IARiB,CAQZ,CAAC;AAACC,IAAAA;AAAD,GAAD,KAASA,GAAG,CAAC,CAAD,CARA,CAAnB;AASAjB,EAAAA,GAAG,CAACkB,KAAJ,CAAUN,IAAV,EAAiBO,GAAD,IAAO;AACnB,QAAGA,GAAH,EAAQ,MAAMA,GAAN;AACRnB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBe,IAAhB,CAAqB;AACjBR,MAAAA,IAAI,EAACjB,WAAW,CAACI,GAAD;AADC,KAArB;AAGH,GALD;AAMH,CAlCD;AAoCA,eAAeH,OAAf","sourcesContent":["import nextConnect from 'next-connect';\r\nimport isEmail from 'validator/lib/isEmail';\r\nimport normalizeEmail from 'validator/lib/normalizeEmail';\r\nimport bcrypt from 'bcryptjs';\r\nimport { nanoid } from 'nanoid';\r\nimport middleware from '../../middlewares/middleware';\r\nimport { extractUser } from '../../lib/api-helper';\r\n\r\nconst handler = nextConnect();\r\n\r\nhandler.use(middleware)\r\n\r\nhandler.post(async (req, res)=>{\r\n    const email =  normalizeEmail(req.email)\r\n    const {name, password} = req.body;\r\n    if(!isEmail){\r\n        res.status(400).send(\"invalid email\")\r\n        return;\r\n    }\r\n    if(!name){\r\n        res.status(400).send(\"Name is  required\")\r\n        return;\r\n    }\r\n    if(!password){\r\n        res.status(400).send(\"Password is required\")\r\n        return;\r\n    }\r\n    if((await req.db.collection('users').countDocuments({email})>0)){\r\n        res.status(400).send(\"Email already exist\")\r\n    }\r\n    const hashedPassword = await bcrypt.hash(password,10);\r\n    const user = await req.db.collection('users').insertOne(\r\n        {\r\n            _id:nanoid(12),\r\n            name,\r\n            email,\r\n            password:hashedPassword,\r\n            isVerified:false,\r\n        }\r\n    ).then(({ops})=>ops[0]);\r\n    res.logIn(user, (err)=>{\r\n        if(err) throw err;\r\n        res.status(201).json({\r\n            user:extractUser(req)\r\n        })\r\n    })\r\n})\r\n\r\nexport default handler;"]},"metadata":{},"sourceType":"module"}