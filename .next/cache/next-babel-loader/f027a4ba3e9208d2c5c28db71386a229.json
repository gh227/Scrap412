{"ast":null,"code":"import nextConnect from 'next-connect';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../../middlewares/middleware';\nimport cors from 'cors';\nconst handler = nextConnect();\nconst corsOptions = {\n  origin: process.env.HOST\n};\nhandler.use(cors(corsOptions)).use(middleware);\nhandler.get(async (req, res) => {\n  const posts = await req.db.collection('posts').find({}).sort({\n    createdAt: -1\n  }).toArray();\n  res.send({\n    posts\n  });\n});\nhandler.post(async (req, res) => {\n  if (!req.user) {\n    return res.status(401).send('unauthenticated');\n  }\n\n  const {\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content\n  } = req.body;\n  if (!content) return res.status(400).send('You must write something');\n  const post = {\n    _id: nanoid(),\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content,\n    createdAt: new Date(),\n    creatorId: req.user._id\n  };\n  await req.db.collection('posts').insertOne(post);\n  return res.send(post);\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/posts/index.js"],"names":["nextConnect","nanoid","middleware","cors","handler","corsOptions","origin","process","env","HOST","use","get","req","res","posts","db","collection","find","sort","createdAt","toArray","send","post","user","status","image_link","caption","author","source","source_link","category","headings","abstract_cat","content","body","_id","Date","creatorId","insertOne"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,OAAO,GAAGJ,WAAW,EAA3B;AAEA,MAAMK,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADF,CAApB;AAIAL,OAAO,CAACM,GAAR,CAAYP,IAAI,CAACE,WAAD,CAAhB,EAA+BK,GAA/B,CAAmCR,UAAnC;AAEAE,OAAO,CAACO,GAAR,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAE9B,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,EAAJ,CACjBC,UADiB,CACN,OADM,EAEjBC,IAFiB,CAEZ,EAFY,EAGjBC,IAHiB,CAGZ;AAACC,IAAAA,SAAS,EAAC,CAAC;AAAZ,GAHY,EAIjBC,OAJiB,EAApB;AAMAP,EAAAA,GAAG,CAACQ,IAAJ,CAAS;AAACP,IAAAA;AAAD,GAAT;AACD,CATD;AAWAV,OAAO,CAACkB,IAAR,CAAa,OAAOV,GAAP,EAAYC,GAAZ,KAAoB;AAE/B,MAAI,CAACD,GAAG,CAACW,IAAT,EAAe;AACb,WAAOV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,iBAArB,CAAP;AACD;;AAED,QAAM;AAAEI,IAAAA,UAAF;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA,MAAvB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA,WAAvC;AACJC,IAAAA,QADI;AACMC,IAAAA,QADN;AACgBC,IAAAA,YADhB;AAC8BC,IAAAA;AAD9B,MACyCrB,GAAG,CAACsB,IADnD;AAGA,MAAI,CAACD,OAAL,EAAc,OAAOpB,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,0BAArB,CAAP;AAEd,QAAMC,IAAI,GAAG;AACXa,IAAAA,GAAG,EAAElC,MAAM,EADA;AAEXwB,IAAAA,UAFW;AAGXC,IAAAA,OAHW;AAIXC,IAAAA,MAJW;AAKXC,IAAAA,MALW;AAMXC,IAAAA,WANW;AAOXC,IAAAA,QAPW;AAQXC,IAAAA,QARW;AASXC,IAAAA,YATW;AAUXC,IAAAA,OAVW;AAWXd,IAAAA,SAAS,EAAE,IAAIiB,IAAJ,EAXA;AAYXC,IAAAA,SAAS,EAAEzB,GAAG,CAACW,IAAJ,CAASY;AAZT,GAAb;AAeA,QAAMvB,GAAG,CAACG,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BsB,SAA3B,CAAqChB,IAArC,CAAN;AACA,SAAOT,GAAG,CAACQ,IAAJ,CAASC,IAAT,CAAP;AACD,CA5BD;AA8BA,eAAelB,OAAf","sourcesContent":["import nextConnect from 'next-connect';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../../middlewares/middleware';\nimport cors from 'cors'\n\nconst handler = nextConnect();\n\nconst corsOptions = {\n  origin: process.env.HOST\n}\n\nhandler.use(cors(corsOptions)).use(middleware);\n\nhandler.get(async (req, res) => {\n\n  const posts = await req.db\n    .collection('posts')\n    .find({})\n    .sort({createdAt:-1})\n    .toArray();\n\n  res.send({posts})\n});\n\nhandler.post(async (req, res) => {\n    \n  if (!req.user) {\n    return res.status(401).send('unauthenticated');\n  }\n\n  const { image_link, caption, author, source, source_link, \n    category, headings, abstract_cat, content} = req.body;\n\n  if (!content) return res.status(400).send('You must write something');\n\n  const post = {\n    _id: nanoid(),\n    image_link, \n    caption, \n    author, \n    source, \n    source_link, \n    category, \n    headings, \n    abstract_cat, \n    content,\n    createdAt: new Date(),\n    creatorId: req.user._id,\n  };\n\n  await req.db.collection('posts').insertOne(post);\n  return res.send(post);\n});\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}