{"ast":null,"code":"import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nimport cors from 'cors';\nconst handler = nextConnect();\nvar whitelist = ['http://example1.com', 'http://example2.com'];\n\nvar corsOptionsDelegate = function (req, callback) {\n  var corsOptions;\n\n  if (whitelist.indexOf(req.header('Origin')) !== -1) {\n    corsOptions = {\n      origin: true\n    }; // reflect (enable) the requested origin in the CORS response\n  } else {\n    corsOptions = {\n      origin: false\n    }; // disable CORS for this request\n  }\n\n  callback(null, corsOptions); // callback expects two parameters: error and options\n};\n\nhandler.use(middleware);\nhandler.get('/api/users', (req, res, next) => {\n  // if(cors(corsOptionsDelegate)) return next();\n  if (req.headers.host !== 'http://example1.com') {\n    res.send('an error ocurred : ');\n    console.log(req.Origin);\n  } else {\n    return next();\n  }\n}, async (req, res) => res.send(\"not working\"));\nhandler.post(async (req, res) => {\n  const email = normalizeEmail(req.body.email);\n  console.log(req.body.email);\n  const {\n    name,\n    password\n  } = req.body;\n\n  if (!name) {\n    res.status(400).send(\"Name is  required\");\n    return;\n  }\n\n  if (!isEmail(email)) {\n    res.status(400).send(\"invalid email\");\n    return;\n  }\n\n  if (!password) {\n    res.status(400).send(\"Password is required\");\n    return;\n  }\n\n  if ((await req.db.collection('users').countDocuments({\n    email\n  })) > 0) {\n    res.status(400).send(\"Email already exist\");\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 10);\n  const user = await req.db.collection('users').insertOne({\n    _id: nanoid(12),\n    name,\n    email,\n    password: hashedPassword,\n    isVerified: false\n  }).then(({\n    ops\n  }) => ops[0]);\n  req.logIn(user, err => {\n    if (err) throw err;\n    res.status(201).json({\n      user: extractUser(req)\n    });\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/users.js"],"names":["nextConnect","isEmail","normalizeEmail","bcrypt","nanoid","middleware","extractUser","cors","handler","whitelist","corsOptionsDelegate","req","callback","corsOptions","indexOf","header","origin","use","get","res","next","headers","host","send","console","log","Origin","post","email","body","name","password","status","db","collection","countDocuments","hashedPassword","hash","user","insertOne","_id","isVerified","then","ops","logIn","err","json"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nimport cors from 'cors'\n\nconst handler = nextConnect();\n\nvar whitelist = ['http://example1.com', 'http://example2.com']\nvar corsOptionsDelegate = function (req, callback) {\n  var corsOptions;\n  if (whitelist.indexOf(req.header('Origin')) !== -1) {\n    corsOptions = { origin: true } // reflect (enable) the requested origin in the CORS response\n  } else {\n    corsOptions = { origin: false } // disable CORS for this request\n  }\n  callback(null, corsOptions) // callback expects two parameters: error and options\n}\n\n\nhandler.use(middleware);\n\n\nhandler.get('/api/users', (req, res, next)=>{\n   // if(cors(corsOptionsDelegate)) return next();\n    if(req.headers.host !== 'http://example1.com'){\n        res.send('an error ocurred : ')\n        console.log( req.Origin)\n    }\n    else{\n        return next();\n    }\n    \n\n}, async(req, res)=>res.send(\"not working\"));\n\nhandler.post(async (req, res)=>{\n    \n    const email = normalizeEmail(req.body.email)\n    console.log(req.body.email)\n    const {name, password} = req.body;\n    \n    if(!name){\n        res.status(400).send(\"Name is  required\")\n        return;\n    }\n    if(!isEmail(email)){\n        res.status(400).send(\"invalid email\")\n        return;\n    }\n    if(!password){\n        res.status(400).send(\"Password is required\")\n        return;\n    }\n\n    if((await req.db.collection('users').countDocuments({email})>0)){\n        res.status(400).send(\"Email already exist\")\n    }\n    const hashedPassword = await bcrypt.hash(password,10);\n    const user = await req.db.collection('users').insertOne(\n        {\n            _id:nanoid(12),\n            name,\n            email,\n            password:hashedPassword,\n            isVerified:false,\n        }\n    ).then(({ops})=>ops[0]);\n    req.logIn(user, (err)=>{\n        if(err) throw err;\n        res.status(201).json({\n            user:extractUser(req)\n        })\n    })\n})\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}