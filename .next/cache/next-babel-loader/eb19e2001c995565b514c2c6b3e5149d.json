{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hero\\\\Documents\\\\projects\\\\Next\\\\pages\\\\news\\\\create.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from '../../components/Head';\nimport React, { useState, useEffect } from 'react';\nimport { useCurrentUser } from '../../lib/hooks';\nimport Loader from '../../components/Loader';\nimport NotFound from '../404';\n\nconst CreatePost = () => {\n  const {\n    0: errMsg,\n    1: setErrMsg\n  } = useState('');\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState({\n    image_link: '',\n    caption: '',\n    author: '',\n    source: '',\n    source_link: '',\n    category: '',\n    headings: ''\n  });\n  const [user] = useCurrentUser();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    if (user) {\n      setTimeout(() => {\n        setLoading(false);\n      }, 2000);\n      console.log(loading);\n    }\n  }, []);\n\n  const handleInput = e => {\n    const value = e.target.value;\n    setInputValue(_objectSpread({}, inputValue, {\n      [e.target.name]: value\n    }));\n  };\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const body = {\n      image_link: e.currentTarget.image_link.value,\n      caption: e.currentTarget.caption.value,\n      author: e.currentTarget.author.value,\n      source: e.currentTarget.source.value,\n      source_link: e.currentTarget.source_link.value,\n      category: e.currentTarget.category.value,\n      headings: e.currentTarget.headings.value,\n      abstract_cat: e.currentTarget.abstract_cat.value,\n      content: e.currentTarget.content.value,\n      date: new Date()\n    };\n\n    try {\n      const res = await fetch(`/api/posts`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n\n      if (res.status == 200 || res.status == 201) {\n        setErrMsg(\"posted  successfully\");\n      }\n    } catch (err) {\n      setErrMsg(\"An error occured, pls check your internet connection and try again\");\n    } // revalidate the `post-pages` key in usePostPages\n    //revalidate();\n    // Perhaps show a dialog box informing the post has been posted\n\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }), loading ? __jsx(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }) : __jsx(NotFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 6\n    }\n  }));\n};\n\nexport default CreatePost;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/news/create.js"],"names":["Head","React","useState","useEffect","useCurrentUser","Loader","NotFound","CreatePost","errMsg","setErrMsg","inputValue","setInputValue","image_link","caption","author","source","source_link","category","headings","user","loading","setLoading","setTimeout","console","log","handleInput","e","value","target","name","handleSubmit","preventDefault","body","currentTarget","abstract_cat","content","date","Date","res","fetch","method","headers","JSON","stringify","status","err"],"mappings":"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","sourcesContent":["import Head from '../../components/Head'\nimport React, {useState, useEffect} from 'react'\nimport { useCurrentUser } from '../../lib/hooks';\nimport Loader from '../../components/Loader'\n\nimport NotFound from '../404'\n\n\nconst CreatePost=()=>{\n  const [errMsg, setErrMsg] = useState('')\n  const [inputValue, setInputValue] = useState({image_link:'',caption:'', author:'',source:'', source_link:'', category:'', headings:''})\n  const [user] = useCurrentUser();\n  const [loading, setLoading] = useState(true)\nuseEffect(() => {\n    if(user) {\n      setTimeout(()=>{setLoading(false)}, 2000)\n      console.log(loading)\n    }\n  }, [])\n\n  const handleInput = (e)=>{\n    const value = e.target.value;\n    setInputValue({...inputValue, [e.target.name]:value})  \n}\n\n  async function handleSubmit(e){\n    e.preventDefault();\n    const body = {\n      image_link: e.currentTarget.image_link.value,\n      caption: e.currentTarget.caption.value,\n      author: e.currentTarget.author.value,\n      source: e.currentTarget.source.value,\n      source_link: e.currentTarget.source_link.value,\n      category: e.currentTarget.category.value,\n      headings: e.currentTarget.headings.value,\n      abstract_cat: e.currentTarget.abstract_cat.value,\n      content: e.currentTarget.content.value,\n      date: new Date()\n    };\n   try{\n     const res = await fetch(`/api/posts`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body),\n    });\n    if(res.status==200||res.status==201){setErrMsg(\"posted  successfully\")}\n  }\n  catch(err){\n    setErrMsg(\"An error occured, pls check your internet connection and try again\")\n  }\n  \n      \n    \n    // revalidate the `post-pages` key in usePostPages\n    //revalidate();\n    // Perhaps show a dialog box informing the post has been posted\n    \n  }\n\n  return(\n    <>\n    <Head/>\n  {loading ?\n    <Loader/> :\n     <NotFound/>\n\n   }\n    </>\n    )\n}\n\nexport default CreatePost"]},"metadata":{},"sourceType":"module"}