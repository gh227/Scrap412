{"ast":null,"code":"import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nimport cors from 'cors';\nconst handler = nextConnect();\nconsole.log(handler);\nvar whitelist = ['http://example1.com', 'http://example2.com'];\nvar corsOptions = {\n  origin: function (origin, callback) {\n    if (whitelist.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  }\n};\nhandler.use(cors(corsOptions)).use(middleware);\nhandler.get(async (req, res) => res.send(req.db));\nhandler.post(async (req, res) => {\n  const email = normalizeEmail(req.body.email);\n  console.log(req.body.email);\n  const {\n    name,\n    password\n  } = req.body;\n\n  if (!name) {\n    res.status(400).send(\"Name is  required\");\n    return;\n  }\n\n  if (!isEmail(email)) {\n    res.status(400).send(\"invalid email\");\n    return;\n  }\n\n  if (!password) {\n    res.status(400).send(\"Password is required\");\n    return;\n  }\n\n  if ((await req.db.collection('users').countDocuments({\n    email\n  })) > 0) {\n    res.status(400).send(\"Email already exist\");\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 10);\n  const user = await req.db.collection('users').insertOne({\n    _id: nanoid(12),\n    name,\n    email,\n    password: hashedPassword,\n    isVerified: false\n  }).then(({\n    ops\n  }) => ops[0]);\n  req.logIn(user, err => {\n    if (err) throw err;\n    res.status(201).json({\n      user: extractUser(req)\n    });\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/users.js"],"names":["nextConnect","isEmail","normalizeEmail","bcrypt","nanoid","middleware","extractUser","cors","handler","console","log","whitelist","corsOptions","origin","callback","indexOf","Error","use","get","req","res","send","db","post","email","body","name","password","status","collection","countDocuments","hashedPassword","hash","user","insertOne","_id","isVerified","then","ops","logIn","err","json"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nimport cors from 'cors'\n\nconst handler = nextConnect();\n\nconsole.log(handler)\n\nvar whitelist = ['http://example1.com', 'http://example2.com']\nvar corsOptions = {\n  origin: function (origin, callback) {\n    if (whitelist.indexOf(origin) !== -1) {\n      callback(null, true)\n    } else {\n      callback(new Error('Not allowed by CORS'))\n    }\n  }\n}\n\nhandler.use(cors(corsOptions)).use(middleware);\n\n\nhandler.get(async(req, res)=>res.send(req.db));\n\nhandler.post(async (req, res)=>{\n    \n    const email = normalizeEmail(req.body.email)\n    console.log(req.body.email)\n    const {name, password} = req.body;\n    \n    if(!name){\n        res.status(400).send(\"Name is  required\")\n        return;\n    }\n    if(!isEmail(email)){\n        res.status(400).send(\"invalid email\")\n        return;\n    }\n    if(!password){\n        res.status(400).send(\"Password is required\")\n        return;\n    }\n\n    if((await req.db.collection('users').countDocuments({email})>0)){\n        res.status(400).send(\"Email already exist\")\n    }\n    const hashedPassword = await bcrypt.hash(password,10);\n    const user = await req.db.collection('users').insertOne(\n        {\n            _id:nanoid(12),\n            name,\n            email,\n            password:hashedPassword,\n            isVerified:false,\n        }\n    ).then(({ops})=>ops[0]);\n    req.logIn(user, (err)=>{\n        if(err) throw err;\n        res.status(201).json({\n            user:extractUser(req)\n        })\n    })\n})\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}