{"ast":null,"code":"import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nimport cors from 'cors';\nconst handler = nextConnect();\nconst corsOptions = {\n  origin: \"https://ifactonews.com\"\n};\nhandler.use(cors(corsOptions)).use(middleware);\nhandler.get(async (req, res) => res.send(req.db));\nhandler.post(async (req, res) => {\n  const email = normalizeEmail(req.body.email);\n  console.log(req.body.email);\n  const {\n    name,\n    password\n  } = req.body;\n\n  if (!name) {\n    res.status(400).send(\"Name is  required\");\n    return;\n  }\n\n  if (!isEmail(email)) {\n    res.status(400).send(\"invalid email\");\n    return;\n  }\n\n  if (!password) {\n    res.status(400).send(\"Password is required\");\n    return;\n  }\n\n  if ((await req.db.collection('users').countDocuments({\n    email\n  })) > 0) {\n    res.status(400).send(\"Email already exist\");\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 10);\n  const user = await req.db.collection('users').insertOne({\n    _id: nanoid(12),\n    name,\n    email,\n    password: hashedPassword,\n    isVerified: false\n  }).then(({\n    ops\n  }) => ops[0]);\n  req.logIn(user, err => {\n    if (err) throw err;\n    res.status(201).json({\n      user: extractUser(req)\n    });\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/users.js"],"names":["nextConnect","isEmail","normalizeEmail","bcrypt","nanoid","middleware","extractUser","cors","handler","corsOptions","origin","use","get","req","res","send","db","post","email","body","console","log","name","password","status","collection","countDocuments","hashedPassword","hash","user","insertOne","_id","isVerified","then","ops","logIn","err","json"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,OAAO,GAAGR,WAAW,EAA3B;AAEA,MAAMS,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAE;AADU,CAApB;AAIAF,OAAO,CAACG,GAAR,CAAYJ,IAAI,CAACE,WAAD,CAAhB,EAA+BE,GAA/B,CAAmCN,UAAnC;AAGAG,OAAO,CAACI,GAAR,CAAY,OAAMC,GAAN,EAAWC,GAAX,KAAiBA,GAAG,CAACC,IAAJ,CAASF,GAAG,CAACG,EAAb,CAA7B;AAEAR,OAAO,CAACS,IAAR,CAAa,OAAOJ,GAAP,EAAYC,GAAZ,KAAkB;AAE3B,QAAMI,KAAK,GAAGhB,cAAc,CAACW,GAAG,CAACM,IAAJ,CAASD,KAAV,CAA5B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACM,IAAJ,CAASD,KAArB;AACA,QAAM;AAACI,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAmBV,GAAG,CAACM,IAA7B;;AAEA,MAAG,CAACG,IAAJ,EAAS;AACLR,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB,mBAArB;AACA;AACH;;AACD,MAAG,CAACd,OAAO,CAACiB,KAAD,CAAX,EAAmB;AACfJ,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB,eAArB;AACA;AACH;;AACD,MAAG,CAACQ,QAAJ,EAAa;AACTT,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB,sBAArB;AACA;AACH;;AAED,MAAI,OAAMF,GAAG,CAACG,EAAJ,CAAOS,UAAP,CAAkB,OAAlB,EAA2BC,cAA3B,CAA0C;AAACR,IAAAA;AAAD,GAA1C,CAAN,IAAyD,CAA7D,EAAgE;AAC5DJ,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB,qBAArB;AACH;;AACD,QAAMY,cAAc,GAAG,MAAMxB,MAAM,CAACyB,IAAP,CAAYL,QAAZ,EAAqB,EAArB,CAA7B;AACA,QAAMM,IAAI,GAAG,MAAMhB,GAAG,CAACG,EAAJ,CAAOS,UAAP,CAAkB,OAAlB,EAA2BK,SAA3B,CACf;AACIC,IAAAA,GAAG,EAAC3B,MAAM,CAAC,EAAD,CADd;AAEIkB,IAAAA,IAFJ;AAGIJ,IAAAA,KAHJ;AAIIK,IAAAA,QAAQ,EAACI,cAJb;AAKIK,IAAAA,UAAU,EAAC;AALf,GADe,EAQjBC,IARiB,CAQZ,CAAC;AAACC,IAAAA;AAAD,GAAD,KAASA,GAAG,CAAC,CAAD,CARA,CAAnB;AASArB,EAAAA,GAAG,CAACsB,KAAJ,CAAUN,IAAV,EAAiBO,GAAD,IAAO;AACnB,QAAGA,GAAH,EAAQ,MAAMA,GAAN;AACRtB,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBa,IAAhB,CAAqB;AACjBR,MAAAA,IAAI,EAACvB,WAAW,CAACO,GAAD;AADC,KAArB;AAGH,GALD;AAMH,CAtCD;AAwCA,eAAeL,OAAf","sourcesContent":["import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nimport cors from 'cors'\n\nconst handler = nextConnect();\n\nconst corsOptions = {\n  origin: \"https://ifactonews.com\"\n}\n\nhandler.use(cors(corsOptions)).use(middleware);\n\n\nhandler.get(async(req, res)=>res.send(req.db));\n\nhandler.post(async (req, res)=>{\n    \n    const email = normalizeEmail(req.body.email)\n    console.log(req.body.email)\n    const {name, password} = req.body;\n    \n    if(!name){\n        res.status(400).send(\"Name is  required\")\n        return;\n    }\n    if(!isEmail(email)){\n        res.status(400).send(\"invalid email\")\n        return;\n    }\n    if(!password){\n        res.status(400).send(\"Password is required\")\n        return;\n    }\n\n    if((await req.db.collection('users').countDocuments({email})>0)){\n        res.status(400).send(\"Email already exist\")\n    }\n    const hashedPassword = await bcrypt.hash(password,10);\n    const user = await req.db.collection('users').insertOne(\n        {\n            _id:nanoid(12),\n            name,\n            email,\n            password:hashedPassword,\n            isVerified:false,\n        }\n    ).then(({ops})=>ops[0]);\n    req.logIn(user, (err)=>{\n        if(err) throw err;\n        res.status(201).json({\n            user:extractUser(req)\n        })\n    })\n})\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}