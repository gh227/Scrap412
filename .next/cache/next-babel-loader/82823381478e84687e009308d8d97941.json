{"ast":null,"code":"import nextConnect from 'next-connect';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../../middlewares/middleware';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.get(async (req, res) => {\n  const posts = await req.db.collection('posts').find({}).sort({\n    createdAt: -1\n  }).toArray();\n  res.send({\n    posts\n  });\n});\nhandler.post(async (req, res) => {\n  if (!req.user) {\n    return res.status(401).send('unauthenticated');\n  }\n\n  const {\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content\n  } = req.body;\n  if (!content) return res.status(400).send('You must write something');\n  const post = {\n    _id: nanoid(),\n    image_link,\n    caption,\n    author,\n    source,\n    source_link,\n    category,\n    headings,\n    abstract_cat,\n    content,\n    createdAt: new Date(),\n    creatorId: req.user._id\n  };\n  await req.db.collection('posts').insertOne(post);\n  return res.send(post);\n});\nexport default handler;\n/*\r\ncaption update\r\n  const rand = (min, max)=>{\r\n    return String.fromCharCode(Math.floor(Math.random() * (max - min + 1) ) + min , Math.floor(Math.random() * (max - min + 1) ) + min , Math.floor(Math.random() * (max - min + 1) ) + min , Math.floor(Math.random() * (max - min + 1) ) + min , Math.floor(Math.random() * (max - min + 1) ) + min );\r\n  }\r\n  posts.map(value=>{\r\n    console.log(value._id)\r\n    req.db.collection('posts').updateOne({_id:value._id}, {$set:{caption:`BOKO HARAM: UN, Amnesty International, others react to killing of aid workers   ${rand(97, 122)}` }},\r\n  (err,res)=>{if(err) throw err; console.log( \"1 documents updated\")})\r\n  })\r\n  */","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/posts/index.js"],"names":["nextConnect","nanoid","middleware","handler","use","get","req","res","posts","db","collection","find","sort","createdAt","toArray","send","post","user","status","image_link","caption","author","source","source_link","category","headings","abstract_cat","content","body","_id","Date","creatorId","insertOne"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AAEA,MAAMC,OAAO,GAAGH,WAAW,EAA3B;AAEAG,OAAO,CAACC,GAAR,CAAYF,UAAZ;AAEAC,OAAO,CAACE,GAAR,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAE9B,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,EAAJ,CACjBC,UADiB,CACN,OADM,EAEjBC,IAFiB,CAEZ,EAFY,EAGjBC,IAHiB,CAGZ;AAACC,IAAAA,SAAS,EAAC,CAAC;AAAZ,GAHY,EAIjBC,OAJiB,EAApB;AAMAP,EAAAA,GAAG,CAACQ,IAAJ,CAAS;AAACP,IAAAA;AAAD,GAAT;AACD,CATD;AAWAL,OAAO,CAACa,IAAR,CAAa,OAAOV,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,MAAI,CAACD,GAAG,CAACW,IAAT,EAAe;AACb,WAAOV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,iBAArB,CAAP;AACD;;AAED,QAAM;AAAEI,IAAAA,UAAF;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA,MAAvB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA,WAAvC;AACJC,IAAAA,QADI;AACMC,IAAAA,QADN;AACgBC,IAAAA,YADhB;AAC8BC,IAAAA;AAD9B,MACyCrB,GAAG,CAACsB,IADnD;AAGA,MAAI,CAACD,OAAL,EAAc,OAAOpB,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,0BAArB,CAAP;AAEd,QAAMC,IAAI,GAAG;AACXa,IAAAA,GAAG,EAAE5B,MAAM,EADA;AAEXkB,IAAAA,UAFW;AAGXC,IAAAA,OAHW;AAIXC,IAAAA,MAJW;AAKXC,IAAAA,MALW;AAMXC,IAAAA,WANW;AAOXC,IAAAA,QAPW;AAQXC,IAAAA,QARW;AASXC,IAAAA,YATW;AAUXC,IAAAA,OAVW;AAWXd,IAAAA,SAAS,EAAE,IAAIiB,IAAJ,EAXA;AAYXC,IAAAA,SAAS,EAAEzB,GAAG,CAACW,IAAJ,CAASY;AAZT,GAAb;AAeA,QAAMvB,GAAG,CAACG,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BsB,SAA3B,CAAqChB,IAArC,CAAN;AACA,SAAOT,GAAG,CAACQ,IAAJ,CAASC,IAAT,CAAP;AACD,CA3BD;AA6BA,eAAeb,OAAf;AAGA","sourcesContent":["import nextConnect from 'next-connect';\r\nimport { nanoid } from 'nanoid';\r\nimport middleware from '../../../middlewares/middleware';\r\n\r\nconst handler = nextConnect();\r\n\r\nhandler.use(middleware);\r\n\r\nhandler.get(async (req, res) => {\r\n\r\n  const posts = await req.db\r\n    .collection('posts')\r\n    .find({})\r\n    .sort({createdAt:-1})\r\n    .toArray();\r\n\r\n  res.send({posts})\r\n});\r\n\r\nhandler.post(async (req, res) => {\r\n  if (!req.user) {\r\n    return res.status(401).send('unauthenticated');\r\n  }\r\n\r\n  const { image_link, caption, author, source, source_link, \r\n    category, headings, abstract_cat, content} = req.body;\r\n\r\n  if (!content) return res.status(400).send('You must write something');\r\n\r\n  const post = {\r\n    _id: nanoid(),\r\n    image_link, \r\n    caption, \r\n    author, \r\n    source, \r\n    source_link, \r\n    category, \r\n    headings, \r\n    abstract_cat, \r\n    content,\r\n    createdAt: new Date(),\r\n    creatorId: req.user._id,\r\n  };\r\n\r\n  await req.db.collection('posts').insertOne(post);\r\n  return res.send(post);\r\n});\r\n\r\nexport default handler;\r\n\r\n\r\n/*\r\ncaption update\r\n  const rand = (min, max)=>{\r\n    return String.fromCharCode(Math.floor(Math.random() * (max - min + 1) ) + min , Math.floor(Math.random() * (max - min + 1) ) + min , Math.floor(Math.random() * (max - min + 1) ) + min , Math.floor(Math.random() * (max - min + 1) ) + min , Math.floor(Math.random() * (max - min + 1) ) + min );\r\n  }\r\n  posts.map(value=>{\r\n    console.log(value._id)\r\n    req.db.collection('posts').updateOne({_id:value._id}, {$set:{caption:`BOKO HARAM: UN, Amnesty International, others react to killing of aid workers   ${rand(97, 122)}` }},\r\n  (err,res)=>{if(err) throw err; console.log( \"1 documents updated\")})\r\n  })\r\n  */"]},"metadata":{},"sourceType":"module"}