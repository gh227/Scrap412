{"ast":null,"code":"import crypto from 'crypto';\nimport sgMail from '@sendgrid/mail';\nimport nextConnect from 'next-connect';\nimport middleware from '../../../../middlewares/middleware';\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.post(async (req, res) => {\n  console.log('reached');\n\n  if (!req.user) {\n    res.json(401).send('you need to be authenticated');\n    return;\n  }\n\n  const token = crypto.randomBytes(32).toString('hex');\n  await req.db.collection('tokens').insertOne({\n    token,\n    userId: req.user._id,\n    type: 'emailVerify',\n    expireAt: new Date(Date.now() + 1000 * 60 * 60 * 24)\n  });\n  const msg = {\n    to: req.user.email,\n    from: process.env.EMAIL_FROM,\n    html: `\n      <div>\n        <p>Hello, ${req.user.name}</p>\n        <p>Please follow <a href=\"${process.env.WEB_URI}/verify-email/${token}\">this link</a> to confirm your email.</p>\n      </div>\n      `\n  };\n  await sgMail.send(msg);\n  res.end('ok');\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/user/email/verify.js"],"names":["crypto","sgMail","nextConnect","middleware","setApiKey","process","env","SENDGRID_API_KEY","handler","use","post","req","res","console","log","user","json","send","token","randomBytes","toString","db","collection","insertOne","userId","_id","type","expireAt","Date","now","msg","to","email","from","EMAIL_FROM","html","name","WEB_URI","end"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AAEAF,MAAM,CAACG,SAAP,CAAiBC,OAAO,CAACC,GAAR,CAAYC,gBAA7B;AAEA,MAAMC,OAAO,GAAGN,WAAW,EAA3B;AAEAM,OAAO,CAACC,GAAR,CAAYN,UAAZ;AAEAK,OAAO,CAACE,IAAR,CAAa,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AACF,MAAI,CAACH,GAAG,CAACI,IAAT,EAAe;AAAEH,IAAAA,GAAG,CAACI,IAAJ,CAAS,GAAT,EAAcC,IAAd,CAAmB,8BAAnB;AAAoD;AAAS;;AAC9E,QAAMC,KAAK,GAAGlB,MAAM,CAACmB,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAd;AACA,QAAMT,GAAG,CAACU,EAAJ,CAAOC,UAAP,CAAkB,QAAlB,EAA4BC,SAA5B,CAAsC;AAC1CL,IAAAA,KAD0C;AAE1CM,IAAAA,MAAM,EAAEb,GAAG,CAACI,IAAJ,CAASU,GAFyB;AAG1CC,IAAAA,IAAI,EAAE,aAHoC;AAI1CC,IAAAA,QAAQ,EAAE,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAvC;AAJgC,GAAtC,CAAN;AAMA,QAAMC,GAAG,GAAG;AACVC,IAAAA,EAAE,EAAEpB,GAAG,CAACI,IAAJ,CAASiB,KADH;AAEVC,IAAAA,IAAI,EAAE5B,OAAO,CAACC,GAAR,CAAY4B,UAFR;AAGVC,IAAAA,IAAI,EAAG;;oBAESxB,GAAG,CAACI,IAAJ,CAASqB,IAAK;oCACE/B,OAAO,CAACC,GAAR,CAAY+B,OAAQ,iBAAgBnB,KAAM;;;AANhE,GAAZ;AAUA,QAAMjB,MAAM,CAACgB,IAAP,CAAYa,GAAZ,CAAN;AACAlB,EAAAA,GAAG,CAAC0B,GAAJ,CAAQ,IAAR;AACD,CAtBD;AAwBA,eAAe9B,OAAf","sourcesContent":["import crypto from 'crypto';\r\nimport sgMail from '@sendgrid/mail';\r\nimport nextConnect from 'next-connect';\r\nimport middleware from '../../../../middlewares/middleware';\r\n\r\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\r\n\r\nconst handler = nextConnect();\r\n\r\nhandler.use(middleware);\r\n\r\nhandler.post(async (req, res) => {\r\n    console.log('reached')\r\n  if (!req.user) { res.json(401).send('you need to be authenticated'); return; }\r\n  const token = crypto.randomBytes(32).toString('hex');\r\n  await req.db.collection('tokens').insertOne({\r\n    token,\r\n    userId: req.user._id,\r\n    type: 'emailVerify',\r\n    expireAt: new Date(Date.now() + 1000 * 60 * 60 * 24),\r\n  });\r\n  const msg = {\r\n    to: req.user.email,\r\n    from: process.env.EMAIL_FROM,\r\n    html: `\r\n      <div>\r\n        <p>Hello, ${req.user.name}</p>\r\n        <p>Please follow <a href=\"${process.env.WEB_URI}/verify-email/${token}\">this link</a> to confirm your email.</p>\r\n      </div>\r\n      `,\r\n  };\r\n  await sgMail.send(msg);\r\n  res.end('ok');\r\n});\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}