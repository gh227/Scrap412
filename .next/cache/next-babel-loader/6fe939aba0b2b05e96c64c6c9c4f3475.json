{"ast":null,"code":"import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nimport cors from 'cors';\nconst handler = nextConnect();\nconst corsOptions = {\n  origin: \"https://ifactonews.com\"\n};\nhandler.use(cors(corsOptions)).use(middleware);\nhandler.get(async (req, res) => {\n  console.log('request :', req.headers);\n  /*if(req.headers('x-token') == 'ifactonews'){\n      res.send(req.db)}\n      else{\n          res.send(\"unauthorized\")\n      }*/\n\n  res.send('working');\n});\nhandler.post(async (req, res) => {\n  const email = normalizeEmail(req.body.email);\n  console.log(req.body.email);\n  const {\n    name,\n    password\n  } = req.body;\n\n  if (!name) {\n    res.status(400).send(\"Name is  required\");\n    return;\n  }\n\n  if (!isEmail(email)) {\n    res.status(400).send(\"invalid email\");\n    return;\n  }\n\n  if (!password) {\n    res.status(400).send(\"Password is required\");\n    return;\n  }\n\n  if ((await req.db.collection('users').countDocuments({\n    email\n  })) > 0) {\n    res.status(400).send(\"Email already exist\");\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 10);\n  const user = await req.db.collection('users').insertOne({\n    _id: nanoid(12),\n    name,\n    email,\n    password: hashedPassword,\n    isVerified: false\n  }).then(({\n    ops\n  }) => ops[0]);\n  req.logIn(user, err => {\n    if (err) throw err;\n    res.status(201).json({\n      user: extractUser(req)\n    });\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/users.js"],"names":["nextConnect","isEmail","normalizeEmail","bcrypt","nanoid","middleware","extractUser","cors","handler","corsOptions","origin","use","get","req","res","console","log","headers","send","post","email","body","name","password","status","db","collection","countDocuments","hashedPassword","hash","user","insertOne","_id","isVerified","then","ops","logIn","err","json"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,OAAO,GAAGR,WAAW,EAA3B;AAEA,MAAMS,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAE;AADU,CAApB;AAIAF,OAAO,CAACG,GAAR,CAAYJ,IAAI,CAACE,WAAD,CAAhB,EAA+BE,GAA/B,CAAmCN,UAAnC;AAGAG,OAAO,CAACI,GAAR,CAAY,OAAMC,GAAN,EAAWC,GAAX,KAAiB;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,GAAG,CAACI,OAA7B;AACA;;;;;;AAKIH,EAAAA,GAAG,CAACI,IAAJ,CAAS,SAAT;AACH,CARL;AAUAV,OAAO,CAACW,IAAR,CAAa,OAAON,GAAP,EAAYC,GAAZ,KAAkB;AAE3B,QAAMM,KAAK,GAAGlB,cAAc,CAACW,GAAG,CAACQ,IAAJ,CAASD,KAAV,CAA5B;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACQ,IAAJ,CAASD,KAArB;AACA,QAAM;AAACE,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAmBV,GAAG,CAACQ,IAA7B;;AAEA,MAAG,CAACC,IAAJ,EAAS;AACLR,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,mBAArB;AACA;AACH;;AACD,MAAG,CAACjB,OAAO,CAACmB,KAAD,CAAX,EAAmB;AACfN,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,eAArB;AACA;AACH;;AACD,MAAG,CAACK,QAAJ,EAAa;AACTT,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,sBAArB;AACA;AACH;;AAED,MAAI,OAAML,GAAG,CAACY,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BC,cAA3B,CAA0C;AAACP,IAAAA;AAAD,GAA1C,CAAN,IAAyD,CAA7D,EAAgE;AAC5DN,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,qBAArB;AACH;;AACD,QAAMU,cAAc,GAAG,MAAMzB,MAAM,CAAC0B,IAAP,CAAYN,QAAZ,EAAqB,EAArB,CAA7B;AACA,QAAMO,IAAI,GAAG,MAAMjB,GAAG,CAACY,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BK,SAA3B,CACf;AACIC,IAAAA,GAAG,EAAC5B,MAAM,CAAC,EAAD,CADd;AAEIkB,IAAAA,IAFJ;AAGIF,IAAAA,KAHJ;AAIIG,IAAAA,QAAQ,EAACK,cAJb;AAKIK,IAAAA,UAAU,EAAC;AALf,GADe,EAQjBC,IARiB,CAQZ,CAAC;AAACC,IAAAA;AAAD,GAAD,KAASA,GAAG,CAAC,CAAD,CARA,CAAnB;AASAtB,EAAAA,GAAG,CAACuB,KAAJ,CAAUN,IAAV,EAAiBO,GAAD,IAAO;AACnB,QAAGA,GAAH,EAAQ,MAAMA,GAAN;AACRvB,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AACjBR,MAAAA,IAAI,EAACxB,WAAW,CAACO,GAAD;AADC,KAArB;AAGH,GALD;AAMH,CAtCD;AAwCA,eAAeL,OAAf","sourcesContent":["import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helper';\nimport cors from 'cors'\n\nconst handler = nextConnect();\n\nconst corsOptions = {\n  origin: \"https://ifactonews.com\"\n}\n\nhandler.use(cors(corsOptions)).use(middleware);\n\n\nhandler.get(async(req, res)=>{\n    console.log('request :' ,req.headers)\n    /*if(req.headers('x-token') == 'ifactonews'){\n        res.send(req.db)}\n        else{\n            res.send(\"unauthorized\")\n        }*/\n        res.send('working')\n    });\n\nhandler.post(async (req, res)=>{\n    \n    const email = normalizeEmail(req.body.email)\n    console.log(req.body.email)\n    const {name, password} = req.body;\n    \n    if(!name){\n        res.status(400).send(\"Name is  required\")\n        return;\n    }\n    if(!isEmail(email)){\n        res.status(400).send(\"invalid email\")\n        return;\n    }\n    if(!password){\n        res.status(400).send(\"Password is required\")\n        return;\n    }\n\n    if((await req.db.collection('users').countDocuments({email})>0)){\n        res.status(400).send(\"Email already exist\")\n    }\n    const hashedPassword = await bcrypt.hash(password,10);\n    const user = await req.db.collection('users').insertOne(\n        {\n            _id:nanoid(12),\n            name,\n            email,\n            password:hashedPassword,\n            isVerified:false,\n        }\n    ).then(({ops})=>ops[0]);\n    req.logIn(user, (err)=>{\n        if(err) throw err;\n        res.status(201).json({\n            user:extractUser(req)\n        })\n    })\n})\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}