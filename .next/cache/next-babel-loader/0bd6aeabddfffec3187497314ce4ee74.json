{"ast":null,"code":"import Cors from 'cors'; // Initializing the cors middleware\n\nconst cors = Cors({\n  methods: ['POST']\n}); // Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\n\nfunction runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n}\n\nasync function handler(req, res) {\n  // Run the middleware\n  await runMiddleware(req, res, cors); // Rest of the API logic\n\n  res.json({\n    message: 'Hello Everyone!'\n  });\n}\n\nexport default handler;","map":{"version":3,"sources":["C:/Users/hero/Documents/projects/Next/pages/api/users.js"],"names":["Cors","cors","methods","runMiddleware","req","res","fn","Promise","resolve","reject","result","Error","handler","json","message"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB,C,CAEA;;AACA,MAAMC,IAAI,GAAGD,IAAI,CAAC;AAChBE,EAAAA,OAAO,EAAE,CAAE,MAAF;AADO,CAAD,CAAjB,C,CAIA;AACA;;AACA,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,EAAjC,EAAqC;AACnC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCH,IAAAA,EAAE,CAACF,GAAD,EAAMC,GAAN,EAAYK,MAAD,IAAY;AACvB,UAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC3B,eAAOF,MAAM,CAACC,MAAD,CAAb;AACD;;AAED,aAAOF,OAAO,CAACE,MAAD,CAAd;AACD,KANC,CAAF;AAOD,GARM,CAAP;AASD;;AAED,eAAeE,OAAf,CAAuBR,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B;AACA,QAAMF,aAAa,CAACC,GAAD,EAAMC,GAAN,EAAWJ,IAAX,CAAnB,CAF+B,CAI/B;;AACAI,EAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAT;AACD;;AAED,eAAeF,OAAf","sourcesContent":["import Cors from 'cors'\n\n// Initializing the cors middleware\nconst cors = Cors({\n  methods: [ 'POST'],\n})\n\n// Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\nfunction runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    fn(req, res, (result) => {\n      if (result instanceof Error) {\n        return reject(result)\n      }\n\n      return resolve(result)\n    })\n  })\n}\n\nasync function handler(req, res) {\n  // Run the middleware\n  await runMiddleware(req, res, cors)\n\n  // Rest of the API logic\n  res.json({ message: 'Hello Everyone!' })\n}\n\nexport default handler"]},"metadata":{},"sourceType":"module"}